KCPSM6 Assembler log file for program 'C:\Users\patri\Documents\GitHub\CDA4203L-TeamLGSB\Lab 6\picoblaze\program.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 07 Apr 2022
Assembly timestamp: 16:36:51

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 1AD hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 430
Memory locations available: 3666


Assembly listing

 Addr Code               Instruction

 000                     ;================================================================
 000                     ; Port address definitions...
 000                     ;================================================================
 000                     CONSTANT switches, 00             ; Switch read port
 000                     CONSTANT leds, 01                 ; LED write port
 000                     CONSTANT uart_data_rx, 02         ; UART receive read port
 000                     CONSTANT uart_data_tx, 03         ; UART transmit write port
 000                     CONSTANT data_present, 04         ; UART stat read port, lsb
 000                     CONSTANT buffer_full, 05          ; UART stat read port, lsb
 000                     ;================================================================
 000                     ; Useful constant declarations...
 000                     ;================================================================
 000                     CONSTANT all_clear, 00            ; define all clear
 000                     CONSTANT all_set, FF              ; define all set
 000                     CONSTANT ascii_NUL, 00            ; ascii code (null character)
 000                     CONSTANT ascii_SOH, 01            ; ascii code (start of header)
 000                     CONSTANT ascii_STX, 02            ; ascii code (start of text)
 000                     CONSTANT ascii_ETX, 03            ; ascii code (end of text)
 000                     CONSTANT ascii_EOT, 04            ; ascii code (end of xmit)
 000                     CONSTANT ascii_ENQ, 05            ; ascii code (enquiry)
 000                     CONSTANT ascii_ACK, 06            ; ascii code (acknowledge)
 000                     CONSTANT ascii_BEL, 07            ; ascii code (bell)
 000                     CONSTANT ascii_BS, 08             ; ascii code (backspace)
 000                     CONSTANT ascii_HT, 09             ; ascii code (horiz tab)
 000                     CONSTANT ascii_LF, 0A             ; ascii code (line feed)
 000                     CONSTANT ascii_VT, 0B             ; ascii code (vert tab)
 000                     CONSTANT ascii_FF, 0C             ; ascii code (form feed)
 000                     CONSTANT ascii_CR, 0D             ; ascii code (carriage return)
 000                     CONSTANT ascii_SO, 0E             ; ascii code (shift out)
 000                     CONSTANT ascii_SI, 0F             ; ascii code (shift in)
 000                     CONSTANT ascii_DLE, 10            ; ascii code (data link esc)
 000                     CONSTANT ascii_DC1, 11            ; ascii code (device ctrl 1, xon)
 000                     CONSTANT ascii_DC2, 12            ; ascii code (device ctrl 2)
 000                     CONSTANT ascii_DC3, 13            ; ascii code (device ctrl 3, xoff)
 000                     CONSTANT ascii_DC4, 14            ; ascii code (device ctrl 4)
 000                     CONSTANT ascii_NAK, 15            ; ascii code (negative acknowledge)
 000                     CONSTANT ascii_SYN, 16            ; ascii code (sync idle)
 000                     CONSTANT ascii_ETB, 17            ; ascii code (end xmit block)
 000                     CONSTANT ascii_CAN, 18            ; ascii code (cancel)
 000                     CONSTANT ascii_EM, 19             ; ascii code (end of medium)
 000                     CONSTANT ascii_SUB, 1A            ; ascii code (substitute)
 000                     CONSTANT ascii_ESC, 1B            ; ascii code (escape)
 000                     CONSTANT ascii_FS, 1C             ; ascii code (file separator)
 000                     CONSTANT ascii_GS, 1D             ; ascii code (group separator)
 000                     CONSTANT ascii_RS, 1E             ; ascii code (record separator)
 000                     CONSTANT ascii_US, 1F             ; ascii code (unit space)
 000                     CONSTANT ascii_SPACE, 20          ; ascii code
 000                     CONSTANT ascii_EXCLAIM, 21        ; ascii code
 000                     CONSTANT ascii_DBLQUOT, 22        ; ascii code
 000                     CONSTANT ascii_NUMSIGN, 23        ; ascii code
 000                     CONSTANT ascii_DOLLAR, 24         ; ascii code
 000                     CONSTANT ascii_PERCENT, 25        ; ascii code
 000                     CONSTANT ascii_AMP, 26            ; ascii code
 000                     CONSTANT ascii_SINQUOT, 27        ; ascii code
 000                     CONSTANT ascii_LPAREN, 28         ; ascii code
 000                     CONSTANT ascii_RPAREN, 29         ; ascii code
 000                     CONSTANT ascii_ASTERISK, 2A       ; ascii code
 000                     CONSTANT ascii_PLUS, 2B           ; ascii code
 000                     CONSTANT ascii_COMMA, 2C          ; ascii code
 000                     CONSTANT ascii_MINUS, 2D          ; ascii code
 000                     CONSTANT ascii_PERIOD, 2E         ; ascii code
 000                     CONSTANT ascii_FWDSLASH, 2F       ; ascii code
 000                     CONSTANT ascii_0, 30              ; ascii code
 000                     CONSTANT ascii_1, 31              ; ascii code
 000                     CONSTANT ascii_2, 32              ; ascii code
 000                     CONSTANT ascii_3, 33              ; ascii code
 000                     CONSTANT ascii_4, 34              ; ascii code
 000                     CONSTANT ascii_5, 35              ; ascii code
 000                     CONSTANT ascii_6, 36              ; ascii code
 000                     CONSTANT ascii_7, 37              ; ascii code
 000                     CONSTANT ascii_8, 38              ; ascii code
 000                     CONSTANT ascii_9, 39              ; ascii code
 000                     CONSTANT ascii_COLON, 3A          ; ascii code
 000                     CONSTANT ascii_SEMI, 3B           ; ascii code
 000                     CONSTANT ascii_LESS, 3C           ; ascii code
 000                     CONSTANT ascii_EQUAL, 3D          ; ascii code
 000                     CONSTANT ascii_GREATER, 3E        ; ascii code
 000                     CONSTANT ascii_QUESTION, 3F       ; ascii code
 000                     CONSTANT ascii_CIRCAT, 40         ; ascii code
 000                     CONSTANT ascii_A, 41              ; ascii code
 000                     CONSTANT ascii_B, 42              ; ascii code
 000                     CONSTANT ascii_C, 43              ; ascii code
 000                     CONSTANT ascii_D, 44              ; ascii code
 000                     CONSTANT ascii_E, 45              ; ascii code
 000                     CONSTANT ascii_F, 46              ; ascii code
 000                     CONSTANT ascii_G, 47              ; ascii code
 000                     CONSTANT ascii_H, 48              ; ascii code
 000                     CONSTANT ascii_I, 49              ; ascii code
 000                     CONSTANT ascii_J, 4A              ; ascii code
 000                     CONSTANT ascii_K, 4B              ; ascii code
 000                     CONSTANT ascii_L, 4C              ; ascii code
 000                     CONSTANT ascii_M, 4D              ; ascii code
 000                     CONSTANT ascii_N, 4E              ; ascii code
 000                     CONSTANT ascii_O, 4F              ; ascii code
 000                     CONSTANT ascii_P, 50              ; ascii code
 000                     CONSTANT ascii_Q, 51              ; ascii code
 000                     CONSTANT ascii_R, 52              ; ascii code
 000                     CONSTANT ascii_S, 53              ; ascii code
 000                     CONSTANT ascii_T, 54              ; ascii code
 000                     CONSTANT ascii_U, 55              ; ascii code
 000                     CONSTANT ascii_V, 56              ; ascii code
 000                     CONSTANT ascii_W, 57              ; ascii code
 000                     CONSTANT ascii_X, 58              ; ascii code
 000                     CONSTANT ascii_Y, 59              ; ascii code
 000                     CONSTANT ascii_Z, 5A              ; ascii code
 000                     CONSTANT ascii_LBKT, 5B           ; ascii code
 000                     CONSTANT ascii_BKSLASH, 5C        ; ascii code
 000                     CONSTANT ascii_RBKT, 5D           ; ascii code
 000                     CONSTANT ascii_CARET, 5E          ; ascii code
 000                     CONSTANT ascii_UNDER, 5F          ; ascii code
 000                     CONSTANT ascii_TICK, 60           ; ascii code
 000                     CONSTANT ascii_a, 61              ; ascii code
 000                     CONSTANT ascii_b, 62              ; ascii code
 000                     CONSTANT ascii_c, 63              ; ascii code
 000                     CONSTANT ascii_d, 64              ; ascii code
 000                     CONSTANT ascii_e, 65              ; ascii code
 000                     CONSTANT ascii_f, 66              ; ascii code
 000                     CONSTANT ascii_g, 67              ; ascii code
 000                     CONSTANT ascii_h, 68              ; ascii code
 000                     CONSTANT ascii_i, 69              ; ascii code
 000                     CONSTANT ascii_j, 6A              ; ascii code
 000                     CONSTANT ascii_k, 6B              ; ascii code
 000                     CONSTANT ascii_l, 6C              ; ascii code
 000                     CONSTANT ascii_m, 6D              ; ascii code
 000                     CONSTANT ascii_n, 6E              ; ascii code
 000                     CONSTANT ascii_o, 6F              ; ascii code
 000                     CONSTANT ascii_p, 70              ; ascii code
 000                     CONSTANT ascii_q, 71              ; ascii code
 000                     CONSTANT ascii_r, 72              ; ascii code
 000                     CONSTANT ascii_s, 73              ; ascii code
 000                     CONSTANT ascii_t, 74              ; ascii code
 000                     CONSTANT ascii_u, 75              ; ascii code
 000                     CONSTANT ascii_v, 76              ; ascii code
 000                     CONSTANT ascii_w, 77              ; ascii code
 000                     CONSTANT ascii_x, 78              ; ascii code
 000                     CONSTANT ascii_y, 79              ; ascii code
 000                     CONSTANT ascii_z, 7A              ; ascii code
 000                     CONSTANT ascii_LBRACE, 7B         ; ascii code
 000                     CONSTANT ascii_VBAR, 7C           ; ascii code
 000                     CONSTANT ascii_RBRACE, 7D         ; ascii code
 000                     CONSTANT ascii_TILDE, 7E          ; ascii code
 000                     CONSTANT ascii_DEL, 7F            ; ascii code
 000                     ;================================================================
 000                     ; Actual assembly program goes here...
 000                     ;
 000                     ; NOTE: size limit is 4096 lines of actual assembly code
 000                     ;       Old documentation says it is 1024. This is now incorrect.
 000                     ;================================================================
 000  22005              JUMP 005[cold_start]
 001               wait: 
 001  09305              INPUT s3, 05[buffer_full]
 002  1D301              COMPARE s3, 01
 003  32001              JUMP Z, 001[wait]
 004  25000              RETURN 
 005  00000  cold_start: LOAD s0, s0                       ; (nop)
 006                     ; Code 1
 006                     ; Write code to output a message to the
 006                     ; serial port.  The message must be longer
 006                     ; than 25 characters.
 006  0100A              LOAD s0, 0A[ascii_LF]             ;
 007  2D003              OUTPUT s0, 03[uart_data_tx]
 008  2F013              STORE s0, 13
 009  20001              CALL 001[wait]
 00A  01057              LOAD s0, 57[ascii_W]              ;W
 00B  2D003              OUTPUT s0, 03[uart_data_tx]
 00C  2F000              STORE s0, 00
 00D  20001              CALL 001[wait]
 00E  01065              LOAD s0, 65[ascii_e]              ;e
 00F  2D003              OUTPUT s0, 03[uart_data_tx]
 010  2F001              STORE s0, 01
 011  20001              CALL 001[wait]
 012  0106C              LOAD s0, 6C[ascii_l]              ;l
 013  2D003              OUTPUT s0, 03[uart_data_tx]
 014  2F002              STORE s0, 02
 015  20001              CALL 001[wait]
 016  01063              LOAD s0, 63[ascii_c]              ;c
 017  2D003              OUTPUT s0, 03[uart_data_tx]
 018  2F003              STORE s0, 03
 019  20001              CALL 001[wait]
 01A  0106F              LOAD s0, 6F[ascii_o]              ;o
 01B  2D003              OUTPUT s0, 03[uart_data_tx]
 01C  2F004              STORE s0, 04
 01D  20001              CALL 001[wait]
 01E  0106D              LOAD s0, 6D[ascii_m]              ;m
 01F  2D003              OUTPUT s0, 03[uart_data_tx]
 020  2F005              STORE s0, 05
 021  20001              CALL 001[wait]
 022  01065              LOAD s0, 65[ascii_e]              ;e
 023  2D003              OUTPUT s0, 03[uart_data_tx]
 024  2F006              STORE s0, 06
 025  20001              CALL 001[wait]
 026  01020              LOAD s0, 20[ascii_SPACE]          ;
 027  2D003              OUTPUT s0, 03[uart_data_tx]
 028  2F007              STORE s0, 07
 029  20001              CALL 001[wait]
 02A  01074              LOAD s0, 74[ascii_t]              ;t
 02B  2D003              OUTPUT s0, 03[uart_data_tx]
 02C  2F008              STORE s0, 08
 02D  20001              CALL 001[wait]
 02E  0106F              LOAD s0, 6F[ascii_o]              ;o
 02F  2D003              OUTPUT s0, 03[uart_data_tx]
 030  2F009              STORE s0, 09
 031  20001              CALL 001[wait]
 032  01020              LOAD s0, 20[ascii_SPACE]          ;
 033  2D003              OUTPUT s0, 03[uart_data_tx]
 034  2F00A              STORE s0, 0A
 035  20001              CALL 001[wait]
 036  0104C              LOAD s0, 4C[ascii_L]              ;L
 037  2D003              OUTPUT s0, 03[uart_data_tx]
 038  2F00B              STORE s0, 0B
 039  20001              CALL 001[wait]
 03A  0106F              LOAD s0, 6F[ascii_o]              ;o
 03B  2D003              OUTPUT s0, 03[uart_data_tx]
 03C  2F00C              STORE s0, 0C
 03D  20001              CALL 001[wait]
 03E  0106F              LOAD s0, 6F[ascii_o]              ;o
 03F  2D003              OUTPUT s0, 03[uart_data_tx]
 040  2F00D              STORE s0, 0D
 041  20001              CALL 001[wait]
 042  01070              LOAD s0, 70[ascii_p]              ;p
 043  2D003              OUTPUT s0, 03[uart_data_tx]
 044  2F00E              STORE s0, 0E
 045  20001              CALL 001[wait]
 046  01062              LOAD s0, 62[ascii_b]              ;b
 047  2D003              OUTPUT s0, 03[uart_data_tx]
 048  2F00F              STORE s0, 0F
 049  20001              CALL 001[wait]
 04A  01061              LOAD s0, 61[ascii_a]              ;a
 04B  2D003              OUTPUT s0, 03[uart_data_tx]
 04C  2F010              STORE s0, 10
 04D  20001              CALL 001[wait]
 04E  01063              LOAD s0, 63[ascii_c]              ;c
 04F  2D003              OUTPUT s0, 03[uart_data_tx]
 050  2F011              STORE s0, 11
 051  20001              CALL 001[wait]
 052  0106B              LOAD s0, 6B[ascii_k]              ;k
 053  2D003              OUTPUT s0, 03[uart_data_tx]
 054  2F012              STORE s0, 12
 055  20001              CALL 001[wait]
 056  01021              LOAD s0, 21[ascii_EXCLAIM]        ;!
 057  2D003              OUTPUT s0, 03[uart_data_tx]
 058  2F013              STORE s0, 13
 059  20001              CALL 001[wait]
 05A  0100A              LOAD s0, 0A[ascii_LF]             ;
 05B  2D003              OUTPUT s0, 03[uart_data_tx]
 05C  2F013              STORE s0, 13
 05D  20001              CALL 001[wait]
 05E  01008              LOAD s0, 08[ascii_BS]             ;
 05F  2D003              OUTPUT s0, 03[uart_data_tx]
 060  2F013              STORE s0, 13
 061  20001              CALL 001[wait]
 062  01008              LOAD s0, 08[ascii_BS]             ;
 063  2D003              OUTPUT s0, 03[uart_data_tx]
 064  2F013              STORE s0, 13
 065  20001              CALL 001[wait]
 066  01008              LOAD s0, 08[ascii_BS]             ;
 067  2D003              OUTPUT s0, 03[uart_data_tx]
 068  2F013              STORE s0, 13
 069  20001              CALL 001[wait]
 06A  01008              LOAD s0, 08[ascii_BS]             ;
 06B  2D003              OUTPUT s0, 03[uart_data_tx]
 06C  2F013              STORE s0, 13
 06D  20001              CALL 001[wait]
 06E  01008              LOAD s0, 08[ascii_BS]             ;
 06F  2D003              OUTPUT s0, 03[uart_data_tx]
 070  2F013              STORE s0, 13
 071  20001              CALL 001[wait]
 072  01008              LOAD s0, 08[ascii_BS]             ;
 073  2D003              OUTPUT s0, 03[uart_data_tx]
 074  2F013              STORE s0, 13
 075  20001              CALL 001[wait]
 076  01008              LOAD s0, 08[ascii_BS]             ;
 077  2D003              OUTPUT s0, 03[uart_data_tx]
 078  2F013              STORE s0, 13
 079  20001              CALL 001[wait]
 07A  01008              LOAD s0, 08[ascii_BS]             ;
 07B  2D003              OUTPUT s0, 03[uart_data_tx]
 07C  2F013              STORE s0, 13
 07D  20001              CALL 001[wait]
 07E  01008              LOAD s0, 08[ascii_BS]             ;
 07F  2D003              OUTPUT s0, 03[uart_data_tx]
 080  2F013              STORE s0, 13
 081  20001              CALL 001[wait]
 082  01008              LOAD s0, 08[ascii_BS]             ;
 083  2D003              OUTPUT s0, 03[uart_data_tx]
 084  2F013              STORE s0, 13
 085  20001              CALL 001[wait]
 086  01008              LOAD s0, 08[ascii_BS]             ;
 087  2D003              OUTPUT s0, 03[uart_data_tx]
 088  2F013              STORE s0, 13
 089  20001              CALL 001[wait]
 08A  01008              LOAD s0, 08[ascii_BS]             ;
 08B  2D003              OUTPUT s0, 03[uart_data_tx]
 08C  2F013              STORE s0, 13
 08D  20001              CALL 001[wait]
 08E  01008              LOAD s0, 08[ascii_BS]             ;
 08F  2D003              OUTPUT s0, 03[uart_data_tx]
 090  2F013              STORE s0, 13
 091  20001              CALL 001[wait]
 092  01008              LOAD s0, 08[ascii_BS]             ;
 093  2D003              OUTPUT s0, 03[uart_data_tx]
 094  2F013              STORE s0, 13
 095  20001              CALL 001[wait]
 096  01008              LOAD s0, 08[ascii_BS]             ;
 097  2D003              OUTPUT s0, 03[uart_data_tx]
 098  2F013              STORE s0, 13
 099  20001              CALL 001[wait]
 09A  01008              LOAD s0, 08[ascii_BS]             ;
 09B  2D003              OUTPUT s0, 03[uart_data_tx]
 09C  2F013              STORE s0, 13
 09D  20001              CALL 001[wait]
 09E  01008              LOAD s0, 08[ascii_BS]             ;
 09F  2D003              OUTPUT s0, 03[uart_data_tx]
 0A0  2F013              STORE s0, 13
 0A1  20001              CALL 001[wait]
 0A2  01008              LOAD s0, 08[ascii_BS]             ;
 0A3  2D003              OUTPUT s0, 03[uart_data_tx]
 0A4  2F013              STORE s0, 13
 0A5  20001              CALL 001[wait]
 0A6  01008              LOAD s0, 08[ascii_BS]             ;
 0A7  2D003              OUTPUT s0, 03[uart_data_tx]
 0A8  2F013              STORE s0, 13
 0A9  20001              CALL 001[wait]
 0AA  01008              LOAD s0, 08[ascii_BS]             ;
 0AB  2D003              OUTPUT s0, 03[uart_data_tx]
 0AC  2F013              STORE s0, 13
 0AD  20001              CALL 001[wait]
 0AE  01049              LOAD s0, 49[ascii_I]              ;I
 0AF  2D003              OUTPUT s0, 03[uart_data_tx]
 0B0  2F013              STORE s0, 13
 0B1  20001              CALL 001[wait]
 0B2  01020              LOAD s0, 20[ascii_SPACE]          ;
 0B3  2D003              OUTPUT s0, 03[uart_data_tx]
 0B4  2F013              STORE s0, 13
 0B5  20001              CALL 001[wait]
 0B6  01057              LOAD s0, 57[ascii_W]              ;W
 0B7  2D003              OUTPUT s0, 03[uart_data_tx]
 0B8  2F013              STORE s0, 13
 0B9  20001              CALL 001[wait]
 0BA  01061              LOAD s0, 61[ascii_a]              ;a
 0BB  2D003              OUTPUT s0, 03[uart_data_tx]
 0BC  2F013              STORE s0, 13
 0BD  20001              CALL 001[wait]
 0BE  0106E              LOAD s0, 6E[ascii_n]              ;n
 0BF  2D003              OUTPUT s0, 03[uart_data_tx]
 0C0  2F013              STORE s0, 13
 0C1  20001              CALL 001[wait]
 0C2  01074              LOAD s0, 74[ascii_t]              ;t
 0C3  2D003              OUTPUT s0, 03[uart_data_tx]
 0C4  2F013              STORE s0, 13
 0C5  20001              CALL 001[wait]
 0C6  01020              LOAD s0, 20[ascii_SPACE]          ;
 0C7  2D003              OUTPUT s0, 03[uart_data_tx]
 0C8  2F013              STORE s0, 13
 0C9  20001              CALL 001[wait]
 0CA  01074              LOAD s0, 74[ascii_t]              ;t
 0CB  2D003              OUTPUT s0, 03[uart_data_tx]
 0CC  2F013              STORE s0, 13
 0CD  20001              CALL 001[wait]
 0CE  0106F              LOAD s0, 6F[ascii_o]              ;o
 0CF  2D003              OUTPUT s0, 03[uart_data_tx]
 0D0  2F013              STORE s0, 13
 0D1  20001              CALL 001[wait]
 0D2  01020              LOAD s0, 20[ascii_SPACE]          ;
 0D3  2D003              OUTPUT s0, 03[uart_data_tx]
 0D4  2F013              STORE s0, 13
 0D5  20001              CALL 001[wait]
 0D6  0104B              LOAD s0, 4B[ascii_K]              ;K
 0D7  2D003              OUTPUT s0, 03[uart_data_tx]
 0D8  2F013              STORE s0, 13
 0D9  20001              CALL 001[wait]
 0DA  0104D              LOAD s0, 4D[ascii_M]              ;M
 0DB  2D003              OUTPUT s0, 03[uart_data_tx]
 0DC  2F013              STORE s0, 13
 0DD  20001              CALL 001[wait]
 0DE  01053              LOAD s0, 53[ascii_S]              ;S
 0DF  2D003              OUTPUT s0, 03[uart_data_tx]
 0E0  2F013              STORE s0, 13
 0E1  20001              CALL 001[wait]
 0E2  01053              LOAD s0, 53[ascii_S]              ;S
 0E3  2D003              OUTPUT s0, 03[uart_data_tx]
 0E4  2F013              STORE s0, 13
 0E5  20001              CALL 001[wait]
 0E6  01053              LOAD s0, 53[ascii_S]              ;S
 0E7  2D003              OUTPUT s0, 03[uart_data_tx]
 0E8  2F013              STORE s0, 13
 0E9  20001              CALL 001[wait]
 0EA  01053              LOAD s0, 53[ascii_S]              ;S
 0EB  2D003              OUTPUT s0, 03[uart_data_tx]
 0EC  2F013              STORE s0, 13
 0ED  20001              CALL 001[wait]
 0EE  01053              LOAD s0, 53[ascii_S]              ;S
 0EF  2D003              OUTPUT s0, 03[uart_data_tx]
 0F0  2F013              STORE s0, 13
 0F1  20001              CALL 001[wait]
 0F2  01053              LOAD s0, 53[ascii_S]              ;S
 0F3  2D003              OUTPUT s0, 03[uart_data_tx]
 0F4  2F013              STORE s0, 13
 0F5  20001              CALL 001[wait]
 0F6  01053              LOAD s0, 53[ascii_S]              ;S
 0F7  2D003              OUTPUT s0, 03[uart_data_tx]
 0F8  2F013              STORE s0, 13
 0F9  20001              CALL 001[wait]
 0FA  01053              LOAD s0, 53[ascii_S]              ;S
 0FB  2D003              OUTPUT s0, 03[uart_data_tx]
 0FC  2F013              STORE s0, 13
 0FD  20001              CALL 001[wait]
 0FE  01053              LOAD s0, 53[ascii_S]              ;S
 0FF  2D003              OUTPUT s0, 03[uart_data_tx]
 100  2F013              STORE s0, 13
 101  20001              CALL 001[wait]
 102  01053              LOAD s0, 53[ascii_S]              ;S
 103  2D003              OUTPUT s0, 03[uart_data_tx]
 104  2F013              STORE s0, 13
 105  20001              CALL 001[wait]
 106  01053              LOAD s0, 53[ascii_S]              ;S
 107  2D003              OUTPUT s0, 03[uart_data_tx]
 108  2F013              STORE s0, 13
 109  20001              CALL 001[wait]
 10A  01053              LOAD s0, 53[ascii_S]              ;S
 10B  2D003              OUTPUT s0, 03[uart_data_tx]
 10C  2F013              STORE s0, 13
 10D  20001              CALL 001[wait]
 10E  01053              LOAD s0, 53[ascii_S]              ;S
 10F  2D003              OUTPUT s0, 03[uart_data_tx]
 110  2F013              STORE s0, 13
 111  20001              CALL 001[wait]
 112  01053              LOAD s0, 53[ascii_S]              ;S
 113  2D003              OUTPUT s0, 03[uart_data_tx]
 114  2F013              STORE s0, 13
 115  20001              CALL 001[wait]
 116  01053              LOAD s0, 53[ascii_S]              ;S
 117  2D003              OUTPUT s0, 03[uart_data_tx]
 118  2F013              STORE s0, 13
 119  20001              CALL 001[wait]
 11A  01053              LOAD s0, 53[ascii_S]              ;S
 11B  2D003              OUTPUT s0, 03[uart_data_tx]
 11C  2F013              STORE s0, 13
 11D  20001              CALL 001[wait]
 11E  01053              LOAD s0, 53[ascii_S]              ;S
 11F  2D003              OUTPUT s0, 03[uart_data_tx]
 120  2F013              STORE s0, 13
 121  20001              CALL 001[wait]
 122  01053              LOAD s0, 53[ascii_S]              ;S
 123  2D003              OUTPUT s0, 03[uart_data_tx]
 124  2F013              STORE s0, 13
 125  20001              CALL 001[wait]
 126  01053              LOAD s0, 53[ascii_S]              ;S
 127  2D003              OUTPUT s0, 03[uart_data_tx]
 128  2F013              STORE s0, 13
 129  20001              CALL 001[wait]
 12A  01053              LOAD s0, 53[ascii_S]              ;S
 12B  2D003              OUTPUT s0, 03[uart_data_tx]
 12C  2F013              STORE s0, 13
 12D  20001              CALL 001[wait]
 12E  01053              LOAD s0, 53[ascii_S]              ;S
 12F  2D003              OUTPUT s0, 03[uart_data_tx]
 130  2F013              STORE s0, 13
 131  20001              CALL 001[wait]
 132  01053              LOAD s0, 53[ascii_S]              ;S
 133  2D003              OUTPUT s0, 03[uart_data_tx]
 134  2F013              STORE s0, 13
 135  20001              CALL 001[wait]
 136  01053              LOAD s0, 53[ascii_S]              ;S
 137  2D003              OUTPUT s0, 03[uart_data_tx]
 138  2F013              STORE s0, 13
 139  20001              CALL 001[wait]
 13A  01053              LOAD s0, 53[ascii_S]              ;S
 13B  2D003              OUTPUT s0, 03[uart_data_tx]
 13C  2F013              STORE s0, 13
 13D  20001              CALL 001[wait]
 13E  01053              LOAD s0, 53[ascii_S]              ;S
 13F  2D003              OUTPUT s0, 03[uart_data_tx]
 140  2F013              STORE s0, 13
 141  20001              CALL 001[wait]
 142  01053              LOAD s0, 53[ascii_S]              ;S
 143  2D003              OUTPUT s0, 03[uart_data_tx]
 144  2F013              STORE s0, 13
 145  20001              CALL 001[wait]
 146  01053              LOAD s0, 53[ascii_S]              ;S
 147  2D003              OUTPUT s0, 03[uart_data_tx]
 148  2F013              STORE s0, 13
 149  20001              CALL 001[wait]
 14A  01053              LOAD s0, 53[ascii_S]              ;S
 14B  2D003              OUTPUT s0, 03[uart_data_tx]
 14C  2F013              STORE s0, 13
 14D  20001              CALL 001[wait]
 14E  01053              LOAD s0, 53[ascii_S]              ;S
 14F  2D003              OUTPUT s0, 03[uart_data_tx]
 150  2F013              STORE s0, 13
 151  20001              CALL 001[wait]
 152  01053              LOAD s0, 53[ascii_S]              ;S
 153  2D003              OUTPUT s0, 03[uart_data_tx]
 154  2F013              STORE s0, 13
 155  20001              CALL 001[wait]
 156  01053              LOAD s0, 53[ascii_S]              ;S
 157  2D003              OUTPUT s0, 03[uart_data_tx]
 158  2F013              STORE s0, 13
 159  20001              CALL 001[wait]
 15A  01053              LOAD s0, 53[ascii_S]              ;S
 15B  2D003              OUTPUT s0, 03[uart_data_tx]
 15C  2F013              STORE s0, 13
 15D  20001              CALL 001[wait]
 15E  01053              LOAD s0, 53[ascii_S]              ;S
 15F  2D003              OUTPUT s0, 03[uart_data_tx]
 160  2F013              STORE s0, 13
 161  20001              CALL 001[wait]
 162  01053              LOAD s0, 53[ascii_S]              ;S
 163  2D003              OUTPUT s0, 03[uart_data_tx]
 164  2F013              STORE s0, 13
 165  20001              CALL 001[wait]
 166  01053              LOAD s0, 53[ascii_S]              ;S
 167  2D003              OUTPUT s0, 03[uart_data_tx]
 168  2F013              STORE s0, 13
 169  20001              CALL 001[wait]
 16A  01053              LOAD s0, 53[ascii_S]              ;S
 16B  2D003              OUTPUT s0, 03[uart_data_tx]
 16C  2F013              STORE s0, 13
 16D  20001              CALL 001[wait]
 16E  01053              LOAD s0, 53[ascii_S]              ;S
 16F  2D003              OUTPUT s0, 03[uart_data_tx]
 170  2F013              STORE s0, 13
 171  20001              CALL 001[wait]
 172  01053              LOAD s0, 53[ascii_S]              ;S
 173  2D003              OUTPUT s0, 03[uart_data_tx]
 174  2F013              STORE s0, 13
 175  20001              CALL 001[wait]
 176  01053              LOAD s0, 53[ascii_S]              ;S
 177  2D003              OUTPUT s0, 03[uart_data_tx]
 178  2F013              STORE s0, 13
 179  20001              CALL 001[wait]
 17A  01053              LOAD s0, 53[ascii_S]              ;S
 17B  2D003              OUTPUT s0, 03[uart_data_tx]
 17C  2F013              STORE s0, 13
 17D  20001              CALL 001[wait]
 17E  01053              LOAD s0, 53[ascii_S]              ;S
 17F  2D003              OUTPUT s0, 03[uart_data_tx]
 180  2F013              STORE s0, 13
 181  20001              CALL 001[wait]
 182  01053              LOAD s0, 53[ascii_S]              ;S
 183  2D003              OUTPUT s0, 03[uart_data_tx]
 184  2F013              STORE s0, 13
 185  20001              CALL 001[wait]
 186  01053              LOAD s0, 53[ascii_S]              ;S
 187  2D003              OUTPUT s0, 03[uart_data_tx]
 188  2F013              STORE s0, 13
 189  20001              CALL 001[wait]
 18A  01053              LOAD s0, 53[ascii_S]              ;S
 18B  2D003              OUTPUT s0, 03[uart_data_tx]
 18C  2F013              STORE s0, 13
 18D  20001              CALL 001[wait]
 18E  01053              LOAD s0, 53[ascii_S]              ;S
 18F  2D003              OUTPUT s0, 03[uart_data_tx]
 190  2F013              STORE s0, 13
 191  20001              CALL 001[wait]
 192  01053              LOAD s0, 53[ascii_S]              ;S
 193  2D003              OUTPUT s0, 03[uart_data_tx]
 194  2F013              STORE s0, 13
 195  20001              CALL 001[wait]
 196  01053              LOAD s0, 53[ascii_S]              ;S
 197  2D003              OUTPUT s0, 03[uart_data_tx]
 198  2F013              STORE s0, 13
 199  20001              CALL 001[wait]
 19A  01053              LOAD s0, 53[ascii_S]              ;S
 19B  2D003              OUTPUT s0, 03[uart_data_tx]
 19C  2F013              STORE s0, 13
 19D  20001              CALL 001[wait]
 19E  00000    led_echo: LOAD s0, s0                       ; (nop)
 19F                     ; Code 2
 19F                     ; Write code to read the switch state and
 19F                     ; write it, inverted, to the LED output port.
 19F  09000              INPUT s0, 00[switches]
 1A0  28000              DISABLE INTERRUPT
 1A1  070FF              XOR s0, FF
 1A2  2D001              OUTPUT s0, 01[leds]
 1A3  28001              ENABLE INTERRUPT
 1A4  221A5              JUMP 1A5[rs232_echo]
 1A5  00000  rs232_echo: LOAD s0, s0                       ; (nop)
 1A6                     ; Code 3
 1A6                     ; Write code to check if a byte has been
 1A6                     ; received by the uart.  If so, write it
 1A6                     ; back to the uart transmit port.  Then...
 1A6                     NAMEREG sF, dr
 1A6                     NAMEREG sE, Data
 1A6             BEGIN1: 
 1A6  09F04              INPUT sF[dr], 04[data_present]
 1A7  0DF01              TEST sF[dr], 01
 1A8  381AA              CALL C, 1AA[SEND]
 1A9  221A6              JUMP 1A6[BEGIN1]
 1AA               SEND: 
 1AA  09E02              INPUT sE[Data], 02[uart_data_rx]
 1AB  1D005              COMPARE s0, 05[buffer_full]
 1AC  2DE03              OUTPUT sE[Data], 03[uart_data_tx]
 1AD  2219E              JUMP 19E[led_echo]                ; endless loop
 1AE                     ;================================================================
 1AE                     ;
 1AE                     ;================================================================


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

C:\Users\patri\Documents\GitHub\CDA4203L-TeamLGSB\Lab 6\picoblaze\program.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   16'd         
 timestamp_minutes 36'd         
 timestamp_seconds 51'd         
 datestamp_year    22'd         
 datestamp_month   4'd          
 datestamp_day     07'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           
 switches          00           program.psm
 leds              01           program.psm
 uart_data_rx      02           program.psm
 uart_data_tx      03           program.psm
 data_present      04           program.psm
 buffer_full       05           program.psm
 all_clear         00           program.psm
 all_set           FF           program.psm
 ascii_NUL         00           program.psm
 ascii_SOH         01           program.psm
 ascii_STX         02           program.psm
 ascii_ETX         03           program.psm
 ascii_EOT         04           program.psm
 ascii_ENQ         05           program.psm
 ascii_ACK         06           program.psm
 ascii_BEL         07           program.psm
 ascii_BS          08           program.psm
 ascii_HT          09           program.psm
 ascii_LF          0A           program.psm
 ascii_VT          0B           program.psm
 ascii_FF          0C           program.psm
 ascii_CR          0D           program.psm
 ascii_SO          0E           program.psm
 ascii_SI          0F           program.psm
 ascii_DLE         10           program.psm
 ascii_DC1         11           program.psm
 ascii_DC2         12           program.psm
 ascii_DC3         13           program.psm
 ascii_DC4         14           program.psm
 ascii_NAK         15           program.psm
 ascii_SYN         16           program.psm
 ascii_ETB         17           program.psm
 ascii_CAN         18           program.psm
 ascii_EM          19           program.psm
 ascii_SUB         1A           program.psm
 ascii_ESC         1B           program.psm
 ascii_FS          1C           program.psm
 ascii_GS          1D           program.psm
 ascii_RS          1E           program.psm
 ascii_US          1F           program.psm
 ascii_SPACE       20           program.psm
 ascii_EXCLAIM     21           program.psm
 ascii_DBLQUOT     22           program.psm
 ascii_NUMSIGN     23           program.psm
 ascii_DOLLAR      24           program.psm
 ascii_PERCENT     25           program.psm
 ascii_AMP         26           program.psm
 ascii_SINQUOT     27           program.psm
 ascii_LPAREN      28           program.psm
 ascii_RPAREN      29           program.psm
 ascii_ASTERISK    2A           program.psm
 ascii_PLUS        2B           program.psm
 ascii_COMMA       2C           program.psm
 ascii_MINUS       2D           program.psm
 ascii_PERIOD      2E           program.psm
 ascii_FWDSLASH    2F           program.psm
 ascii_0           30           program.psm
 ascii_1           31           program.psm
 ascii_2           32           program.psm
 ascii_3           33           program.psm
 ascii_4           34           program.psm
 ascii_5           35           program.psm
 ascii_6           36           program.psm
 ascii_7           37           program.psm
 ascii_8           38           program.psm
 ascii_9           39           program.psm
 ascii_COLON       3A           program.psm
 ascii_SEMI        3B           program.psm
 ascii_LESS        3C           program.psm
 ascii_EQUAL       3D           program.psm
 ascii_GREATER     3E           program.psm
 ascii_QUESTION    3F           program.psm
 ascii_CIRCAT      40           program.psm
 ascii_A           41           program.psm
 ascii_B           42           program.psm
 ascii_C           43           program.psm
 ascii_D           44           program.psm
 ascii_E           45           program.psm
 ascii_F           46           program.psm
 ascii_G           47           program.psm
 ascii_H           48           program.psm
 ascii_I           49           program.psm
 ascii_J           4A           program.psm
 ascii_K           4B           program.psm
 ascii_L           4C           program.psm
 ascii_M           4D           program.psm
 ascii_N           4E           program.psm
 ascii_O           4F           program.psm
 ascii_P           50           program.psm
 ascii_Q           51           program.psm
 ascii_R           52           program.psm
 ascii_S           53           program.psm
 ascii_T           54           program.psm
 ascii_U           55           program.psm
 ascii_V           56           program.psm
 ascii_W           57           program.psm
 ascii_X           58           program.psm
 ascii_Y           59           program.psm
 ascii_Z           5A           program.psm
 ascii_LBKT        5B           program.psm
 ascii_BKSLASH     5C           program.psm
 ascii_RBKT        5D           program.psm
 ascii_CARET       5E           program.psm
 ascii_UNDER       5F           program.psm
 ascii_TICK        60           program.psm
 ascii_a           61           program.psm
 ascii_b           62           program.psm
 ascii_c           63           program.psm
 ascii_d           64           program.psm
 ascii_e           65           program.psm
 ascii_f           66           program.psm
 ascii_g           67           program.psm
 ascii_h           68           program.psm
 ascii_i           69           program.psm
 ascii_j           6A           program.psm
 ascii_k           6B           program.psm
 ascii_l           6C           program.psm
 ascii_m           6D           program.psm
 ascii_n           6E           program.psm
 ascii_o           6F           program.psm
 ascii_p           70           program.psm
 ascii_q           71           program.psm
 ascii_r           72           program.psm
 ascii_s           73           program.psm
 ascii_t           74           program.psm
 ascii_u           75           program.psm
 ascii_v           76           program.psm
 ascii_w           77           program.psm
 ascii_x           78           program.psm
 ascii_y           79           program.psm
 ascii_z           7A           program.psm
 ascii_LBRACE      7B           program.psm
 ascii_VBAR        7C           program.psm
 ascii_RBRACE      7D           program.psm
 ascii_TILDE       7E           program.psm
 ascii_DEL         7F           program.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "07 Apr 2022"  
 timestamp$        "16:36:51"     



List of line labels

   Label        Addr  Source PSM File

   wait         001   program.psm
   cold_start   005   program.psm
   led_echo     19E   program.psm
   rs232_echo   1A5   program.psm
   BEGIN1       1A6   program.psm
   SEND         1AA   program.psm



Instruction usage statistics

 Instruction    Instances

 LOAD            105
 STAR              -

 AND               -
 OR                -
 XOR               1

 ADD               -
 ADDCY             -
 SUB               -
 SUBCY             -

 TEST              1
 TESTCY            -
 COMPARE           2
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             4
 OUTPUT          104
 OUTPUTK           -

 STORE             -
 FETCH             -

 DISABLE           1
 ENABLE            1
 RETURNI           -

 JUMP              5
 JUMP@             -
 CALL            103
 CALL@             -
 RETURN            1
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
