KCPSM6 Assembler log file for program 'C:\Users\patri\Documents\GitHub\CDA4203L-TeamLGSB\Lab 6\picoblaze\program.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 07 Apr 2022
Assembly timestamp: 16:58:05

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 1A3 hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 420
Memory locations available: 3676


Assembly listing

 Addr Code               Instruction

 000                     ;================================================================
 000                     ; Port address definitions...
 000                     ;================================================================
 000                     CONSTANT switches, 00             ; Switch read port
 000                     CONSTANT leds, 01                 ; LED write port
 000                     CONSTANT uart_data_rx, 02         ; UART receive read port
 000                     CONSTANT uart_data_tx, 03         ; UART transmit write port
 000                     CONSTANT data_present, 04         ; UART stat read port, lsb
 000                     CONSTANT buffer_full, 05          ; UART stat read port, lsb
 000                     ;================================================================
 000                     ; Useful constant declarations...
 000                     ;================================================================
 000                     CONSTANT all_clear, 00            ; define all clear
 000                     CONSTANT all_set, FF              ; define all set
 000                     CONSTANT ascii_NUL, 00            ; ascii code (null character)
 000                     CONSTANT ascii_SOH, 01            ; ascii code (start of header)
 000                     CONSTANT ascii_STX, 02            ; ascii code (start of text)
 000                     CONSTANT ascii_ETX, 03            ; ascii code (end of text)
 000                     CONSTANT ascii_EOT, 04            ; ascii code (end of xmit)
 000                     CONSTANT ascii_ENQ, 05            ; ascii code (enquiry)
 000                     CONSTANT ascii_ACK, 06            ; ascii code (acknowledge)
 000                     CONSTANT ascii_BEL, 07            ; ascii code (bell)
 000                     CONSTANT ascii_BS, 08             ; ascii code (backspace)
 000                     CONSTANT ascii_HT, 09             ; ascii code (horiz tab)
 000                     CONSTANT ascii_LF, 0A             ; ascii code (line feed)
 000                     CONSTANT ascii_VT, 0B             ; ascii code (vert tab)
 000                     CONSTANT ascii_FF, 0C             ; ascii code (form feed)
 000                     CONSTANT ascii_CR, 0D             ; ascii code (carriage return)
 000                     CONSTANT ascii_SO, 0E             ; ascii code (shift out)
 000                     CONSTANT ascii_SI, 0F             ; ascii code (shift in)
 000                     CONSTANT ascii_DLE, 10            ; ascii code (data link esc)
 000                     CONSTANT ascii_DC1, 11            ; ascii code (device ctrl 1, xon)
 000                     CONSTANT ascii_DC2, 12            ; ascii code (device ctrl 2)
 000                     CONSTANT ascii_DC3, 13            ; ascii code (device ctrl 3, xoff)
 000                     CONSTANT ascii_DC4, 14            ; ascii code (device ctrl 4)
 000                     CONSTANT ascii_NAK, 15            ; ascii code (negative acknowledge)
 000                     CONSTANT ascii_SYN, 16            ; ascii code (sync idle)
 000                     CONSTANT ascii_ETB, 17            ; ascii code (end xmit block)
 000                     CONSTANT ascii_CAN, 18            ; ascii code (cancel)
 000                     CONSTANT ascii_EM, 19             ; ascii code (end of medium)
 000                     CONSTANT ascii_SUB, 1A            ; ascii code (substitute)
 000                     CONSTANT ascii_ESC, 1B            ; ascii code (escape)
 000                     CONSTANT ascii_FS, 1C             ; ascii code (file separator)
 000                     CONSTANT ascii_GS, 1D             ; ascii code (group separator)
 000                     CONSTANT ascii_RS, 1E             ; ascii code (record separator)
 000                     CONSTANT ascii_US, 1F             ; ascii code (unit space)
 000                     CONSTANT ascii_SPACE, 20          ; ascii code
 000                     CONSTANT ascii_EXCLAIM, 21        ; ascii code
 000                     CONSTANT ascii_DBLQUOT, 22        ; ascii code
 000                     CONSTANT ascii_NUMSIGN, 23        ; ascii code
 000                     CONSTANT ascii_DOLLAR, 24         ; ascii code
 000                     CONSTANT ascii_PERCENT, 25        ; ascii code
 000                     CONSTANT ascii_AMP, 26            ; ascii code
 000                     CONSTANT ascii_SINQUOT, 27        ; ascii code
 000                     CONSTANT ascii_LPAREN, 28         ; ascii code
 000                     CONSTANT ascii_RPAREN, 29         ; ascii code
 000                     CONSTANT ascii_ASTERISK, 2A       ; ascii code
 000                     CONSTANT ascii_PLUS, 2B           ; ascii code
 000                     CONSTANT ascii_COMMA, 2C          ; ascii code
 000                     CONSTANT ascii_MINUS, 2D          ; ascii code
 000                     CONSTANT ascii_PERIOD, 2E         ; ascii code
 000                     CONSTANT ascii_FWDSLASH, 2F       ; ascii code
 000                     CONSTANT ascii_0, 30              ; ascii code
 000                     CONSTANT ascii_1, 31              ; ascii code
 000                     CONSTANT ascii_2, 32              ; ascii code
 000                     CONSTANT ascii_3, 33              ; ascii code
 000                     CONSTANT ascii_4, 34              ; ascii code
 000                     CONSTANT ascii_5, 35              ; ascii code
 000                     CONSTANT ascii_6, 36              ; ascii code
 000                     CONSTANT ascii_7, 37              ; ascii code
 000                     CONSTANT ascii_8, 38              ; ascii code
 000                     CONSTANT ascii_9, 39              ; ascii code
 000                     CONSTANT ascii_COLON, 3A          ; ascii code
 000                     CONSTANT ascii_SEMI, 3B           ; ascii code
 000                     CONSTANT ascii_LESS, 3C           ; ascii code
 000                     CONSTANT ascii_EQUAL, 3D          ; ascii code
 000                     CONSTANT ascii_GREATER, 3E        ; ascii code
 000                     CONSTANT ascii_QUESTION, 3F       ; ascii code
 000                     CONSTANT ascii_CIRCAT, 40         ; ascii code
 000                     CONSTANT ascii_A, 41              ; ascii code
 000                     CONSTANT ascii_B, 42              ; ascii code
 000                     CONSTANT ascii_C, 43              ; ascii code
 000                     CONSTANT ascii_D, 44              ; ascii code
 000                     CONSTANT ascii_E, 45              ; ascii code
 000                     CONSTANT ascii_F, 46              ; ascii code
 000                     CONSTANT ascii_G, 47              ; ascii code
 000                     CONSTANT ascii_H, 48              ; ascii code
 000                     CONSTANT ascii_I, 49              ; ascii code
 000                     CONSTANT ascii_J, 4A              ; ascii code
 000                     CONSTANT ascii_K, 4B              ; ascii code
 000                     CONSTANT ascii_L, 4C              ; ascii code
 000                     CONSTANT ascii_M, 4D              ; ascii code
 000                     CONSTANT ascii_N, 4E              ; ascii code
 000                     CONSTANT ascii_O, 4F              ; ascii code
 000                     CONSTANT ascii_P, 50              ; ascii code
 000                     CONSTANT ascii_Q, 51              ; ascii code
 000                     CONSTANT ascii_R, 52              ; ascii code
 000                     CONSTANT ascii_S, 53              ; ascii code
 000                     CONSTANT ascii_T, 54              ; ascii code
 000                     CONSTANT ascii_U, 55              ; ascii code
 000                     CONSTANT ascii_V, 56              ; ascii code
 000                     CONSTANT ascii_W, 57              ; ascii code
 000                     CONSTANT ascii_X, 58              ; ascii code
 000                     CONSTANT ascii_Y, 59              ; ascii code
 000                     CONSTANT ascii_Z, 5A              ; ascii code
 000                     CONSTANT ascii_LBKT, 5B           ; ascii code
 000                     CONSTANT ascii_BKSLASH, 5C        ; ascii code
 000                     CONSTANT ascii_RBKT, 5D           ; ascii code
 000                     CONSTANT ascii_CARET, 5E          ; ascii code
 000                     CONSTANT ascii_UNDER, 5F          ; ascii code
 000                     CONSTANT ascii_TICK, 60           ; ascii code
 000                     CONSTANT ascii_a, 61              ; ascii code
 000                     CONSTANT ascii_b, 62              ; ascii code
 000                     CONSTANT ascii_c, 63              ; ascii code
 000                     CONSTANT ascii_d, 64              ; ascii code
 000                     CONSTANT ascii_e, 65              ; ascii code
 000                     CONSTANT ascii_f, 66              ; ascii code
 000                     CONSTANT ascii_g, 67              ; ascii code
 000                     CONSTANT ascii_h, 68              ; ascii code
 000                     CONSTANT ascii_i, 69              ; ascii code
 000                     CONSTANT ascii_j, 6A              ; ascii code
 000                     CONSTANT ascii_k, 6B              ; ascii code
 000                     CONSTANT ascii_l, 6C              ; ascii code
 000                     CONSTANT ascii_m, 6D              ; ascii code
 000                     CONSTANT ascii_n, 6E              ; ascii code
 000                     CONSTANT ascii_o, 6F              ; ascii code
 000                     CONSTANT ascii_p, 70              ; ascii code
 000                     CONSTANT ascii_q, 71              ; ascii code
 000                     CONSTANT ascii_r, 72              ; ascii code
 000                     CONSTANT ascii_s, 73              ; ascii code
 000                     CONSTANT ascii_t, 74              ; ascii code
 000                     CONSTANT ascii_u, 75              ; ascii code
 000                     CONSTANT ascii_v, 76              ; ascii code
 000                     CONSTANT ascii_w, 77              ; ascii code
 000                     CONSTANT ascii_x, 78              ; ascii code
 000                     CONSTANT ascii_y, 79              ; ascii code
 000                     CONSTANT ascii_z, 7A              ; ascii code
 000                     CONSTANT ascii_LBRACE, 7B         ; ascii code
 000                     CONSTANT ascii_VBAR, 7C           ; ascii code
 000                     CONSTANT ascii_RBRACE, 7D         ; ascii code
 000                     CONSTANT ascii_TILDE, 7E          ; ascii code
 000                     CONSTANT ascii_DEL, 7F            ; ascii code
 000                     ;================================================================
 000                     ; Actual assembly program goes here...
 000                     ;
 000                     ; NOTE: size limit is 4096 lines of actual assembly code
 000                     ;       Old documentation says it is 1024. This is now incorrect.
 000                     ;================================================================
 000  22005              JUMP 005[cold_start]
 001               wait: 
 001  09305              INPUT s3, 05[buffer_full]
 002  1D301              COMPARE s3, 01
 003  32001              JUMP Z, 001[wait]
 004  25000              RETURN 
 005  00000  cold_start: LOAD s0, s0                       ; (nop)
 006                     ; Code 1
 006                     ; Write code to output a message to the
 006                     ; serial port.  The message must be longer
 006                     ; than 25 characters.
 006  01057              LOAD s0, 57[ascii_W]              ;W
 007  2D003              OUTPUT s0, 03[uart_data_tx]
 008  20001              CALL 001[wait]
 009  01065              LOAD s0, 65[ascii_e]              ;e
 00A  2D003              OUTPUT s0, 03[uart_data_tx]
 00B  20001              CALL 001[wait]
 00C  0106C              LOAD s0, 6C[ascii_l]              ;l
 00D  2D003              OUTPUT s0, 03[uart_data_tx]
 00E  20001              CALL 001[wait]
 00F  01063              LOAD s0, 63[ascii_c]              ;c
 010  2D003              OUTPUT s0, 03[uart_data_tx]
 011  20001              CALL 001[wait]
 012  0106F              LOAD s0, 6F[ascii_o]              ;o
 013  2D003              OUTPUT s0, 03[uart_data_tx]
 014  20001              CALL 001[wait]
 015  0106D              LOAD s0, 6D[ascii_m]              ;m
 016  2D003              OUTPUT s0, 03[uart_data_tx]
 017  20001              CALL 001[wait]
 018  01065              LOAD s0, 65[ascii_e]              ;e
 019  2D003              OUTPUT s0, 03[uart_data_tx]
 01A  2F006              STORE s0, 06
 01B  20001              CALL 001[wait]
 01C  01020              LOAD s0, 20[ascii_SPACE]          ;
 01D  2D003              OUTPUT s0, 03[uart_data_tx]
 01E  2F007              STORE s0, 07
 01F  20001              CALL 001[wait]
 020  01074              LOAD s0, 74[ascii_t]              ;t
 021  2D003              OUTPUT s0, 03[uart_data_tx]
 022  2F008              STORE s0, 08
 023  20001              CALL 001[wait]
 024  0106F              LOAD s0, 6F[ascii_o]              ;o
 025  2D003              OUTPUT s0, 03[uart_data_tx]
 026  2F009              STORE s0, 09
 027  20001              CALL 001[wait]
 028  01020              LOAD s0, 20[ascii_SPACE]          ;
 029  2D003              OUTPUT s0, 03[uart_data_tx]
 02A  2F00A              STORE s0, 0A
 02B  20001              CALL 001[wait]
 02C  0104C              LOAD s0, 4C[ascii_L]              ;L
 02D  2D003              OUTPUT s0, 03[uart_data_tx]
 02E  2F00B              STORE s0, 0B
 02F  20001              CALL 001[wait]
 030  0106F              LOAD s0, 6F[ascii_o]              ;o
 031  2D003              OUTPUT s0, 03[uart_data_tx]
 032  2F00C              STORE s0, 0C
 033  20001              CALL 001[wait]
 034  0106F              LOAD s0, 6F[ascii_o]              ;o
 035  2D003              OUTPUT s0, 03[uart_data_tx]
 036  2F00D              STORE s0, 0D
 037  20001              CALL 001[wait]
 038  01070              LOAD s0, 70[ascii_p]              ;p
 039  2D003              OUTPUT s0, 03[uart_data_tx]
 03A  2F00E              STORE s0, 0E
 03B  20001              CALL 001[wait]
 03C  01062              LOAD s0, 62[ascii_b]              ;b
 03D  2D003              OUTPUT s0, 03[uart_data_tx]
 03E  2F00F              STORE s0, 0F
 03F  20001              CALL 001[wait]
 040  01061              LOAD s0, 61[ascii_a]              ;a
 041  2D003              OUTPUT s0, 03[uart_data_tx]
 042  2F010              STORE s0, 10
 043  20001              CALL 001[wait]
 044  01063              LOAD s0, 63[ascii_c]              ;c
 045  2D003              OUTPUT s0, 03[uart_data_tx]
 046  2F011              STORE s0, 11
 047  20001              CALL 001[wait]
 048  0106B              LOAD s0, 6B[ascii_k]              ;k
 049  2D003              OUTPUT s0, 03[uart_data_tx]
 04A  2F012              STORE s0, 12
 04B  20001              CALL 001[wait]
 04C  01021              LOAD s0, 21[ascii_EXCLAIM]        ;!
 04D  2D003              OUTPUT s0, 03[uart_data_tx]
 04E  2F013              STORE s0, 13
 04F  20001              CALL 001[wait]
 050  0100A              LOAD s0, 0A[ascii_LF]             ;
 051  2D003              OUTPUT s0, 03[uart_data_tx]
 052  2F013              STORE s0, 13
 053  20001              CALL 001[wait]
 054  01008              LOAD s0, 08[ascii_BS]             ;
 055  2D003              OUTPUT s0, 03[uart_data_tx]
 056  2F013              STORE s0, 13
 057  20001              CALL 001[wait]
 058  01008              LOAD s0, 08[ascii_BS]             ;
 059  2D003              OUTPUT s0, 03[uart_data_tx]
 05A  2F013              STORE s0, 13
 05B  20001              CALL 001[wait]
 05C  01008              LOAD s0, 08[ascii_BS]             ;
 05D  2D003              OUTPUT s0, 03[uart_data_tx]
 05E  2F013              STORE s0, 13
 05F  20001              CALL 001[wait]
 060  01008              LOAD s0, 08[ascii_BS]             ;
 061  2D003              OUTPUT s0, 03[uart_data_tx]
 062  2F013              STORE s0, 13
 063  20001              CALL 001[wait]
 064  01008              LOAD s0, 08[ascii_BS]             ;
 065  2D003              OUTPUT s0, 03[uart_data_tx]
 066  2F013              STORE s0, 13
 067  20001              CALL 001[wait]
 068  01008              LOAD s0, 08[ascii_BS]             ;
 069  2D003              OUTPUT s0, 03[uart_data_tx]
 06A  2F013              STORE s0, 13
 06B  20001              CALL 001[wait]
 06C  01008              LOAD s0, 08[ascii_BS]             ;
 06D  2D003              OUTPUT s0, 03[uart_data_tx]
 06E  2F013              STORE s0, 13
 06F  20001              CALL 001[wait]
 070  01008              LOAD s0, 08[ascii_BS]             ;
 071  2D003              OUTPUT s0, 03[uart_data_tx]
 072  2F013              STORE s0, 13
 073  20001              CALL 001[wait]
 074  01008              LOAD s0, 08[ascii_BS]             ;
 075  2D003              OUTPUT s0, 03[uart_data_tx]
 076  2F013              STORE s0, 13
 077  20001              CALL 001[wait]
 078  01008              LOAD s0, 08[ascii_BS]             ;
 079  2D003              OUTPUT s0, 03[uart_data_tx]
 07A  2F013              STORE s0, 13
 07B  20001              CALL 001[wait]
 07C  01008              LOAD s0, 08[ascii_BS]             ;
 07D  2D003              OUTPUT s0, 03[uart_data_tx]
 07E  2F013              STORE s0, 13
 07F  20001              CALL 001[wait]
 080  01008              LOAD s0, 08[ascii_BS]             ;
 081  2D003              OUTPUT s0, 03[uart_data_tx]
 082  2F013              STORE s0, 13
 083  20001              CALL 001[wait]
 084  01008              LOAD s0, 08[ascii_BS]             ;
 085  2D003              OUTPUT s0, 03[uart_data_tx]
 086  2F013              STORE s0, 13
 087  20001              CALL 001[wait]
 088  01008              LOAD s0, 08[ascii_BS]             ;
 089  2D003              OUTPUT s0, 03[uart_data_tx]
 08A  2F013              STORE s0, 13
 08B  20001              CALL 001[wait]
 08C  01008              LOAD s0, 08[ascii_BS]             ;
 08D  2D003              OUTPUT s0, 03[uart_data_tx]
 08E  2F013              STORE s0, 13
 08F  20001              CALL 001[wait]
 090  01008              LOAD s0, 08[ascii_BS]             ;
 091  2D003              OUTPUT s0, 03[uart_data_tx]
 092  2F013              STORE s0, 13
 093  20001              CALL 001[wait]
 094  01008              LOAD s0, 08[ascii_BS]             ;
 095  2D003              OUTPUT s0, 03[uart_data_tx]
 096  2F013              STORE s0, 13
 097  20001              CALL 001[wait]
 098  01008              LOAD s0, 08[ascii_BS]             ;
 099  2D003              OUTPUT s0, 03[uart_data_tx]
 09A  2F013              STORE s0, 13
 09B  20001              CALL 001[wait]
 09C  01008              LOAD s0, 08[ascii_BS]             ;
 09D  2D003              OUTPUT s0, 03[uart_data_tx]
 09E  2F013              STORE s0, 13
 09F  20001              CALL 001[wait]
 0A0  01008              LOAD s0, 08[ascii_BS]             ;
 0A1  2D003              OUTPUT s0, 03[uart_data_tx]
 0A2  2F013              STORE s0, 13
 0A3  20001              CALL 001[wait]
 0A4  01049              LOAD s0, 49[ascii_I]              ;I
 0A5  2D003              OUTPUT s0, 03[uart_data_tx]
 0A6  2F013              STORE s0, 13
 0A7  20001              CALL 001[wait]
 0A8  01020              LOAD s0, 20[ascii_SPACE]          ;
 0A9  2D003              OUTPUT s0, 03[uart_data_tx]
 0AA  2F013              STORE s0, 13
 0AB  20001              CALL 001[wait]
 0AC  01057              LOAD s0, 57[ascii_W]              ;W
 0AD  2D003              OUTPUT s0, 03[uart_data_tx]
 0AE  2F013              STORE s0, 13
 0AF  20001              CALL 001[wait]
 0B0  01061              LOAD s0, 61[ascii_a]              ;a
 0B1  2D003              OUTPUT s0, 03[uart_data_tx]
 0B2  2F013              STORE s0, 13
 0B3  20001              CALL 001[wait]
 0B4  0106E              LOAD s0, 6E[ascii_n]              ;n
 0B5  2D003              OUTPUT s0, 03[uart_data_tx]
 0B6  2F013              STORE s0, 13
 0B7  20001              CALL 001[wait]
 0B8  01074              LOAD s0, 74[ascii_t]              ;t
 0B9  2D003              OUTPUT s0, 03[uart_data_tx]
 0BA  2F013              STORE s0, 13
 0BB  20001              CALL 001[wait]
 0BC  01020              LOAD s0, 20[ascii_SPACE]          ;
 0BD  2D003              OUTPUT s0, 03[uart_data_tx]
 0BE  2F013              STORE s0, 13
 0BF  20001              CALL 001[wait]
 0C0  01074              LOAD s0, 74[ascii_t]              ;t
 0C1  2D003              OUTPUT s0, 03[uart_data_tx]
 0C2  2F013              STORE s0, 13
 0C3  20001              CALL 001[wait]
 0C4  0106F              LOAD s0, 6F[ascii_o]              ;o
 0C5  2D003              OUTPUT s0, 03[uart_data_tx]
 0C6  2F013              STORE s0, 13
 0C7  20001              CALL 001[wait]
 0C8  01020              LOAD s0, 20[ascii_SPACE]          ;
 0C9  2D003              OUTPUT s0, 03[uart_data_tx]
 0CA  2F013              STORE s0, 13
 0CB  20001              CALL 001[wait]
 0CC  0104B              LOAD s0, 4B[ascii_K]              ;K
 0CD  2D003              OUTPUT s0, 03[uart_data_tx]
 0CE  2F013              STORE s0, 13
 0CF  20001              CALL 001[wait]
 0D0  0104D              LOAD s0, 4D[ascii_M]              ;M
 0D1  2D003              OUTPUT s0, 03[uart_data_tx]
 0D2  2F013              STORE s0, 13
 0D3  20001              CALL 001[wait]
 0D4  01053              LOAD s0, 53[ascii_S]              ;S
 0D5  2D003              OUTPUT s0, 03[uart_data_tx]
 0D6  2F013              STORE s0, 13
 0D7  20001              CALL 001[wait]
 0D8  01053              LOAD s0, 53[ascii_S]              ;S
 0D9  2D003              OUTPUT s0, 03[uart_data_tx]
 0DA  2F013              STORE s0, 13
 0DB  20001              CALL 001[wait]
 0DC  01053              LOAD s0, 53[ascii_S]              ;S
 0DD  2D003              OUTPUT s0, 03[uart_data_tx]
 0DE  2F013              STORE s0, 13
 0DF  20001              CALL 001[wait]
 0E0  01053              LOAD s0, 53[ascii_S]              ;S
 0E1  2D003              OUTPUT s0, 03[uart_data_tx]
 0E2  2F013              STORE s0, 13
 0E3  20001              CALL 001[wait]
 0E4  01053              LOAD s0, 53[ascii_S]              ;S
 0E5  2D003              OUTPUT s0, 03[uart_data_tx]
 0E6  2F013              STORE s0, 13
 0E7  20001              CALL 001[wait]
 0E8  01053              LOAD s0, 53[ascii_S]              ;S
 0E9  2D003              OUTPUT s0, 03[uart_data_tx]
 0EA  2F013              STORE s0, 13
 0EB  20001              CALL 001[wait]
 0EC  01053              LOAD s0, 53[ascii_S]              ;S
 0ED  2D003              OUTPUT s0, 03[uart_data_tx]
 0EE  2F013              STORE s0, 13
 0EF  20001              CALL 001[wait]
 0F0  01053              LOAD s0, 53[ascii_S]              ;S
 0F1  2D003              OUTPUT s0, 03[uart_data_tx]
 0F2  2F013              STORE s0, 13
 0F3  20001              CALL 001[wait]
 0F4  01053              LOAD s0, 53[ascii_S]              ;S
 0F5  2D003              OUTPUT s0, 03[uart_data_tx]
 0F6  2F013              STORE s0, 13
 0F7  20001              CALL 001[wait]
 0F8  01053              LOAD s0, 53[ascii_S]              ;S
 0F9  2D003              OUTPUT s0, 03[uart_data_tx]
 0FA  2F013              STORE s0, 13
 0FB  20001              CALL 001[wait]
 0FC  01053              LOAD s0, 53[ascii_S]              ;S
 0FD  2D003              OUTPUT s0, 03[uart_data_tx]
 0FE  2F013              STORE s0, 13
 0FF  20001              CALL 001[wait]
 100  01053              LOAD s0, 53[ascii_S]              ;S
 101  2D003              OUTPUT s0, 03[uart_data_tx]
 102  2F013              STORE s0, 13
 103  20001              CALL 001[wait]
 104  01053              LOAD s0, 53[ascii_S]              ;S
 105  2D003              OUTPUT s0, 03[uart_data_tx]
 106  2F013              STORE s0, 13
 107  20001              CALL 001[wait]
 108  01053              LOAD s0, 53[ascii_S]              ;S
 109  2D003              OUTPUT s0, 03[uart_data_tx]
 10A  2F013              STORE s0, 13
 10B  20001              CALL 001[wait]
 10C  01053              LOAD s0, 53[ascii_S]              ;S
 10D  2D003              OUTPUT s0, 03[uart_data_tx]
 10E  2F013              STORE s0, 13
 10F  20001              CALL 001[wait]
 110  01053              LOAD s0, 53[ascii_S]              ;S
 111  2D003              OUTPUT s0, 03[uart_data_tx]
 112  2F013              STORE s0, 13
 113  20001              CALL 001[wait]
 114  01053              LOAD s0, 53[ascii_S]              ;S
 115  2D003              OUTPUT s0, 03[uart_data_tx]
 116  2F013              STORE s0, 13
 117  20001              CALL 001[wait]
 118  01053              LOAD s0, 53[ascii_S]              ;S
 119  2D003              OUTPUT s0, 03[uart_data_tx]
 11A  2F013              STORE s0, 13
 11B  20001              CALL 001[wait]
 11C  01053              LOAD s0, 53[ascii_S]              ;S
 11D  2D003              OUTPUT s0, 03[uart_data_tx]
 11E  2F013              STORE s0, 13
 11F  20001              CALL 001[wait]
 120  01053              LOAD s0, 53[ascii_S]              ;S
 121  2D003              OUTPUT s0, 03[uart_data_tx]
 122  2F013              STORE s0, 13
 123  20001              CALL 001[wait]
 124  01053              LOAD s0, 53[ascii_S]              ;S
 125  2D003              OUTPUT s0, 03[uart_data_tx]
 126  2F013              STORE s0, 13
 127  20001              CALL 001[wait]
 128  01053              LOAD s0, 53[ascii_S]              ;S
 129  2D003              OUTPUT s0, 03[uart_data_tx]
 12A  2F013              STORE s0, 13
 12B  20001              CALL 001[wait]
 12C  01053              LOAD s0, 53[ascii_S]              ;S
 12D  2D003              OUTPUT s0, 03[uart_data_tx]
 12E  2F013              STORE s0, 13
 12F  20001              CALL 001[wait]
 130  01053              LOAD s0, 53[ascii_S]              ;S
 131  2D003              OUTPUT s0, 03[uart_data_tx]
 132  2F013              STORE s0, 13
 133  20001              CALL 001[wait]
 134  01053              LOAD s0, 53[ascii_S]              ;S
 135  2D003              OUTPUT s0, 03[uart_data_tx]
 136  2F013              STORE s0, 13
 137  20001              CALL 001[wait]
 138  01053              LOAD s0, 53[ascii_S]              ;S
 139  2D003              OUTPUT s0, 03[uart_data_tx]
 13A  2F013              STORE s0, 13
 13B  20001              CALL 001[wait]
 13C  01053              LOAD s0, 53[ascii_S]              ;S
 13D  2D003              OUTPUT s0, 03[uart_data_tx]
 13E  2F013              STORE s0, 13
 13F  20001              CALL 001[wait]
 140  01053              LOAD s0, 53[ascii_S]              ;S
 141  2D003              OUTPUT s0, 03[uart_data_tx]
 142  2F013              STORE s0, 13
 143  20001              CALL 001[wait]
 144  01053              LOAD s0, 53[ascii_S]              ;S
 145  2D003              OUTPUT s0, 03[uart_data_tx]
 146  2F013              STORE s0, 13
 147  20001              CALL 001[wait]
 148  01053              LOAD s0, 53[ascii_S]              ;S
 149  2D003              OUTPUT s0, 03[uart_data_tx]
 14A  2F013              STORE s0, 13
 14B  20001              CALL 001[wait]
 14C  01053              LOAD s0, 53[ascii_S]              ;S
 14D  2D003              OUTPUT s0, 03[uart_data_tx]
 14E  2F013              STORE s0, 13
 14F  20001              CALL 001[wait]
 150  01053              LOAD s0, 53[ascii_S]              ;S
 151  2D003              OUTPUT s0, 03[uart_data_tx]
 152  2F013              STORE s0, 13
 153  20001              CALL 001[wait]
 154  01053              LOAD s0, 53[ascii_S]              ;S
 155  2D003              OUTPUT s0, 03[uart_data_tx]
 156  2F013              STORE s0, 13
 157  20001              CALL 001[wait]
 158  01053              LOAD s0, 53[ascii_S]              ;S
 159  2D003              OUTPUT s0, 03[uart_data_tx]
 15A  2F013              STORE s0, 13
 15B  20001              CALL 001[wait]
 15C  01053              LOAD s0, 53[ascii_S]              ;S
 15D  2D003              OUTPUT s0, 03[uart_data_tx]
 15E  2F013              STORE s0, 13
 15F  20001              CALL 001[wait]
 160  01053              LOAD s0, 53[ascii_S]              ;S
 161  2D003              OUTPUT s0, 03[uart_data_tx]
 162  2F013              STORE s0, 13
 163  20001              CALL 001[wait]
 164  01053              LOAD s0, 53[ascii_S]              ;S
 165  2D003              OUTPUT s0, 03[uart_data_tx]
 166  2F013              STORE s0, 13
 167  20001              CALL 001[wait]
 168  01053              LOAD s0, 53[ascii_S]              ;S
 169  2D003              OUTPUT s0, 03[uart_data_tx]
 16A  2F013              STORE s0, 13
 16B  20001              CALL 001[wait]
 16C  01053              LOAD s0, 53[ascii_S]              ;S
 16D  2D003              OUTPUT s0, 03[uart_data_tx]
 16E  2F013              STORE s0, 13
 16F  20001              CALL 001[wait]
 170  01053              LOAD s0, 53[ascii_S]              ;S
 171  2D003              OUTPUT s0, 03[uart_data_tx]
 172  2F013              STORE s0, 13
 173  20001              CALL 001[wait]
 174  01053              LOAD s0, 53[ascii_S]              ;S
 175  2D003              OUTPUT s0, 03[uart_data_tx]
 176  2F013              STORE s0, 13
 177  20001              CALL 001[wait]
 178  01053              LOAD s0, 53[ascii_S]              ;S
 179  2D003              OUTPUT s0, 03[uart_data_tx]
 17A  2F013              STORE s0, 13
 17B  20001              CALL 001[wait]
 17C  01053              LOAD s0, 53[ascii_S]              ;S
 17D  2D003              OUTPUT s0, 03[uart_data_tx]
 17E  2F013              STORE s0, 13
 17F  20001              CALL 001[wait]
 180  01053              LOAD s0, 53[ascii_S]              ;S
 181  2D003              OUTPUT s0, 03[uart_data_tx]
 182  2F013              STORE s0, 13
 183  20001              CALL 001[wait]
 184  01053              LOAD s0, 53[ascii_S]              ;S
 185  2D003              OUTPUT s0, 03[uart_data_tx]
 186  2F013              STORE s0, 13
 187  20001              CALL 001[wait]
 188  01053              LOAD s0, 53[ascii_S]              ;S
 189  2D003              OUTPUT s0, 03[uart_data_tx]
 18A  2F013              STORE s0, 13
 18B  20001              CALL 001[wait]
 18C  01053              LOAD s0, 53[ascii_S]              ;S
 18D  2D003              OUTPUT s0, 03[uart_data_tx]
 18E  2F013              STORE s0, 13
 18F  20001              CALL 001[wait]
 190  01053              LOAD s0, 53[ascii_S]              ;S
 191  2D003              OUTPUT s0, 03[uart_data_tx]
 192  2F013              STORE s0, 13
 193  20001              CALL 001[wait]
 194  00000    led_echo: LOAD s0, s0                       ; (nop)
 195                     ; Code 2
 195                     ; Write code to read the switch state and
 195                     ; write it, inverted, to the LED output port.
 195  09000              INPUT s0, 00[switches]
 196  28000              DISABLE INTERRUPT
 197  070FF              XOR s0, FF
 198  2D001              OUTPUT s0, 01[leds]
 199  28001              ENABLE INTERRUPT
 19A  2219B              JUMP 19B[rs232_echo]
 19B  00000  rs232_echo: LOAD s0, s0                       ; (nop)
 19C                     ; Code 3
 19C                     ; Write code to check if a byte has been
 19C                     ; received by the uart.  If so, write it
 19C                     ; back to the uart transmit port.  Then...
 19C                     NAMEREG sF, dr
 19C                     NAMEREG sE, Data
 19C             BEGIN1: 
 19C  09F04              INPUT sF[dr], 04[data_present]
 19D  0DF01              TEST sF[dr], 01
 19E  381A0              CALL C, 1A0[SEND]
 19F  2219C              JUMP 19C[BEGIN1]
 1A0               SEND: 
 1A0  09E02              INPUT sE[Data], 02[uart_data_rx]
 1A1  1D005              COMPARE s0, 05[buffer_full]
 1A2  2DE03              OUTPUT sE[Data], 03[uart_data_tx]
 1A3  22194              JUMP 194[led_echo]                ; endless loop
 1A4                     ;================================================================
 1A4                     ;
 1A4                     ;================================================================


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

C:\Users\patri\Documents\GitHub\CDA4203L-TeamLGSB\Lab 6\picoblaze\program.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   16'd         
 timestamp_minutes 58'd         
 timestamp_seconds 05'd         
 datestamp_year    22'd         
 datestamp_month   4'd          
 datestamp_day     07'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           
 switches          00           program.psm
 leds              01           program.psm
 uart_data_rx      02           program.psm
 uart_data_tx      03           program.psm
 data_present      04           program.psm
 buffer_full       05           program.psm
 all_clear         00           program.psm
 all_set           FF           program.psm
 ascii_NUL         00           program.psm
 ascii_SOH         01           program.psm
 ascii_STX         02           program.psm
 ascii_ETX         03           program.psm
 ascii_EOT         04           program.psm
 ascii_ENQ         05           program.psm
 ascii_ACK         06           program.psm
 ascii_BEL         07           program.psm
 ascii_BS          08           program.psm
 ascii_HT          09           program.psm
 ascii_LF          0A           program.psm
 ascii_VT          0B           program.psm
 ascii_FF          0C           program.psm
 ascii_CR          0D           program.psm
 ascii_SO          0E           program.psm
 ascii_SI          0F           program.psm
 ascii_DLE         10           program.psm
 ascii_DC1         11           program.psm
 ascii_DC2         12           program.psm
 ascii_DC3         13           program.psm
 ascii_DC4         14           program.psm
 ascii_NAK         15           program.psm
 ascii_SYN         16           program.psm
 ascii_ETB         17           program.psm
 ascii_CAN         18           program.psm
 ascii_EM          19           program.psm
 ascii_SUB         1A           program.psm
 ascii_ESC         1B           program.psm
 ascii_FS          1C           program.psm
 ascii_GS          1D           program.psm
 ascii_RS          1E           program.psm
 ascii_US          1F           program.psm
 ascii_SPACE       20           program.psm
 ascii_EXCLAIM     21           program.psm
 ascii_DBLQUOT     22           program.psm
 ascii_NUMSIGN     23           program.psm
 ascii_DOLLAR      24           program.psm
 ascii_PERCENT     25           program.psm
 ascii_AMP         26           program.psm
 ascii_SINQUOT     27           program.psm
 ascii_LPAREN      28           program.psm
 ascii_RPAREN      29           program.psm
 ascii_ASTERISK    2A           program.psm
 ascii_PLUS        2B           program.psm
 ascii_COMMA       2C           program.psm
 ascii_MINUS       2D           program.psm
 ascii_PERIOD      2E           program.psm
 ascii_FWDSLASH    2F           program.psm
 ascii_0           30           program.psm
 ascii_1           31           program.psm
 ascii_2           32           program.psm
 ascii_3           33           program.psm
 ascii_4           34           program.psm
 ascii_5           35           program.psm
 ascii_6           36           program.psm
 ascii_7           37           program.psm
 ascii_8           38           program.psm
 ascii_9           39           program.psm
 ascii_COLON       3A           program.psm
 ascii_SEMI        3B           program.psm
 ascii_LESS        3C           program.psm
 ascii_EQUAL       3D           program.psm
 ascii_GREATER     3E           program.psm
 ascii_QUESTION    3F           program.psm
 ascii_CIRCAT      40           program.psm
 ascii_A           41           program.psm
 ascii_B           42           program.psm
 ascii_C           43           program.psm
 ascii_D           44           program.psm
 ascii_E           45           program.psm
 ascii_F           46           program.psm
 ascii_G           47           program.psm
 ascii_H           48           program.psm
 ascii_I           49           program.psm
 ascii_J           4A           program.psm
 ascii_K           4B           program.psm
 ascii_L           4C           program.psm
 ascii_M           4D           program.psm
 ascii_N           4E           program.psm
 ascii_O           4F           program.psm
 ascii_P           50           program.psm
 ascii_Q           51           program.psm
 ascii_R           52           program.psm
 ascii_S           53           program.psm
 ascii_T           54           program.psm
 ascii_U           55           program.psm
 ascii_V           56           program.psm
 ascii_W           57           program.psm
 ascii_X           58           program.psm
 ascii_Y           59           program.psm
 ascii_Z           5A           program.psm
 ascii_LBKT        5B           program.psm
 ascii_BKSLASH     5C           program.psm
 ascii_RBKT        5D           program.psm
 ascii_CARET       5E           program.psm
 ascii_UNDER       5F           program.psm
 ascii_TICK        60           program.psm
 ascii_a           61           program.psm
 ascii_b           62           program.psm
 ascii_c           63           program.psm
 ascii_d           64           program.psm
 ascii_e           65           program.psm
 ascii_f           66           program.psm
 ascii_g           67           program.psm
 ascii_h           68           program.psm
 ascii_i           69           program.psm
 ascii_j           6A           program.psm
 ascii_k           6B           program.psm
 ascii_l           6C           program.psm
 ascii_m           6D           program.psm
 ascii_n           6E           program.psm
 ascii_o           6F           program.psm
 ascii_p           70           program.psm
 ascii_q           71           program.psm
 ascii_r           72           program.psm
 ascii_s           73           program.psm
 ascii_t           74           program.psm
 ascii_u           75           program.psm
 ascii_v           76           program.psm
 ascii_w           77           program.psm
 ascii_x           78           program.psm
 ascii_y           79           program.psm
 ascii_z           7A           program.psm
 ascii_LBRACE      7B           program.psm
 ascii_VBAR        7C           program.psm
 ascii_RBRACE      7D           program.psm
 ascii_TILDE       7E           program.psm
 ascii_DEL         7F           program.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "07 Apr 2022"  
 timestamp$        "16:58:05"     



List of line labels

   Label        Addr  Source PSM File

   wait         001   program.psm
   cold_start   005   program.psm
   led_echo     194   program.psm
   rs232_echo   19B   program.psm
   BEGIN1       19C   program.psm
   SEND         1A0   program.psm



Instruction usage statistics

 Instruction    Instances

 LOAD            104
 STAR              -

 AND               -
 OR                -
 XOR               1

 ADD               -
 ADDCY             -
 SUB               -
 SUBCY             -

 TEST              1
 TESTCY            -
 COMPARE           2
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             4
 OUTPUT          103
 OUTPUTK           -

 STORE             -
 FETCH             -

 DISABLE           1
 ENABLE            1
 RETURNI           -

 JUMP              5
 JUMP@             -
 CALL            102
 CALL@             -
 RETURN            1
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
