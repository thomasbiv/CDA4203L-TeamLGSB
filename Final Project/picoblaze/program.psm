 ;================================================================
; Port address definitions...
;================================================================

;Input ports
CONSTANT switches         , 00    ; Switch read port
CONSTANT leds	          , 01    ; LED write port
CONSTANT uart_data_rx     , 02    ; UART receive read port
CONSTANT uart_data_tx     , 03    ; UART transmit write port
CONSTANT data_present     , 04    ; UART stat read port, lsb
CONSTANT buffer_full      , 05    ; UART stat read port, lsb
CONSTANT scroll_up	  , 06	  ; Scroll up port
CONSTANT scroll_down	  , 07	  ; Scroll down port
CONSTANT select		  , 08	  ; Select port
CONSTANT back		  , 09 	  ; Back port
CONSTANT play_pause	  , 0A	  ; Pause/Play port
CONSTANT msg_exists	  , 0B	  ; Signal check if message actually exists in memory
CONSTANT mem_full	  , 0C	  ; Signal checking if memory is full
CONSTANT delete_finish	  , 0F	  ; Signal to let PicoBlaze know deleting has finished

;Output ports
CONSTANT write_to_fsm	  , 0B	  ; Write strobe for fsm
CONSTANT file_select	  , 0C	  ; Write strobe for specific file
CONSTANT vol_sel	  , 04	  ; Write strobe for vol control
CONSTANT recording	  , 05	  ; Write strobe for recording

;================================================================
; Useful constant declarations...
;================================================================

CONSTANT all_clear        , 00    ; define all clear
CONSTANT all_set          , FF    ; define all set

CONSTANT ascii_NUL        , 00    ; ascii code (null character)
CONSTANT ascii_SOH        , 01    ; ascii code (start of header)
CONSTANT ascii_STX        , 02    ; ascii code (start of text)
CONSTANT ascii_ETX        , 03    ; ascii code (end of text)
CONSTANT ascii_EOT        , 04    ; ascii code (end of xmit)
CONSTANT ascii_ENQ        , 05    ; ascii code (enquiry)
CONSTANT ascii_ACK        , 06    ; ascii code (acknowledge)
CONSTANT ascii_BEL        , 07    ; ascii code (bell)
CONSTANT ascii_BS         , 08    ; ascii code (backspace)
CONSTANT ascii_HT         , 09    ; ascii code (horiz tab)
CONSTANT ascii_LF         , 0A    ; ascii code (line feed)
CONSTANT ascii_VT         , 0B    ; ascii code (vert tab)
CONSTANT ascii_FF         , 0C    ; ascii code (form feed)
CONSTANT ascii_CR         , 0D    ; ascii code (carriage return)
CONSTANT ascii_SO         , 0E    ; ascii code (shift out)
CONSTANT ascii_SI         , 0F    ; ascii code (shift in)

CONSTANT ascii_DLE        , 10    ; ascii code (data link esc)
CONSTANT ascii_DC1        , 11    ; ascii code (device ctrl 1, xon)
CONSTANT ascii_DC2        , 12    ; ascii code (device ctrl 2)
CONSTANT ascii_DC3        , 13    ; ascii code (device ctrl 3, xoff)
CONSTANT ascii_DC4        , 14    ; ascii code (device ctrl 4)
CONSTANT ascii_NAK        , 15    ; ascii code (negative acknowledge)
CONSTANT ascii_SYN        , 16    ; ascii code (sync idle)
CONSTANT ascii_ETB        , 17    ; ascii code (end xmit block)
CONSTANT ascii_CAN        , 18    ; ascii code (cancel)
CONSTANT ascii_EM         , 19    ; ascii code (end of medium)
CONSTANT ascii_SUB        , 1A    ; ascii code (substitute)
CONSTANT ascii_ESC        , 1B    ; ascii code (escape)
CONSTANT ascii_FS         , 1C    ; ascii code (file separator)
CONSTANT ascii_GS         , 1D    ; ascii code (group separator)
CONSTANT ascii_RS         , 1E    ; ascii code (record separator)
CONSTANT ascii_US         , 1F    ; ascii code (unit space)

CONSTANT ascii_SPACE      , 20    ; ascii code
CONSTANT ascii_EXCLAIM    , 21    ; ascii code
CONSTANT ascii_DBLQUOT    , 22    ; ascii code
CONSTANT ascii_NUMSIGN    , 23    ; ascii code
CONSTANT ascii_DOLLAR     , 24    ; ascii code
CONSTANT ascii_PERCENT    , 25    ; ascii code
CONSTANT ascii_AMP        , 26    ; ascii code
CONSTANT ascii_SINQUOT    , 27    ; ascii code
CONSTANT ascii_LPAREN     , 28    ; ascii code
CONSTANT ascii_RPAREN     , 29    ; ascii code
CONSTANT ascii_ASTERISK   , 2A    ; ascii code
CONSTANT ascii_PLUS       , 2B    ; ascii code
CONSTANT ascii_COMMA      , 2C    ; ascii code
CONSTANT ascii_MINUS      , 2D    ; ascii code
CONSTANT ascii_PERIOD     , 2E    ; ascii code
CONSTANT ascii_FWDSLASH   , 2F    ; ascii code

CONSTANT ascii_0          , 30    ; ascii code
CONSTANT ascii_1          , 31    ; ascii code
CONSTANT ascii_2          , 32    ; ascii code
CONSTANT ascii_3          , 33    ; ascii code
CONSTANT ascii_4          , 34    ; ascii code
CONSTANT ascii_5          , 35    ; ascii code
CONSTANT ascii_6          , 36    ; ascii code
CONSTANT ascii_7          , 37    ; ascii code
CONSTANT ascii_8          , 38    ; ascii code
CONSTANT ascii_9          , 39    ; ascii code
CONSTANT ascii_COLON      , 3A    ; ascii code
CONSTANT ascii_SEMI       , 3B    ; ascii code
CONSTANT ascii_LESS       , 3C    ; ascii code
CONSTANT ascii_EQUAL      , 3D    ; ascii code
CONSTANT ascii_GREATER    , 3E    ; ascii code
CONSTANT ascii_QUESTION   , 3F    ; ascii code

CONSTANT ascii_CIRCAT     , 40    ; ascii code
CONSTANT ascii_A          , 41    ; ascii code
CONSTANT ascii_B          , 42    ; ascii code
CONSTANT ascii_C          , 43    ; ascii code
CONSTANT ascii_D          , 44    ; ascii code
CONSTANT ascii_E          , 45    ; ascii code
CONSTANT ascii_F          , 46    ; ascii code
CONSTANT ascii_G          , 47    ; ascii code
CONSTANT ascii_H          , 48    ; ascii code
CONSTANT ascii_I          , 49    ; ascii code
CONSTANT ascii_J          , 4A    ; ascii code
CONSTANT ascii_K          , 4B    ; ascii code
CONSTANT ascii_L          , 4C    ; ascii code
CONSTANT ascii_M          , 4D    ; ascii code
CONSTANT ascii_N          , 4E    ; ascii code
CONSTANT ascii_O          , 4F    ; ascii code

CONSTANT ascii_P          , 50    ; ascii code
CONSTANT ascii_Q          , 51    ; ascii code
CONSTANT ascii_R          , 52    ; ascii code
CONSTANT ascii_S          , 53    ; ascii code
CONSTANT ascii_T          , 54    ; ascii code
CONSTANT ascii_U          , 55    ; ascii code
CONSTANT ascii_V          , 56    ; ascii code
CONSTANT ascii_W          , 57    ; ascii code
CONSTANT ascii_X          , 58    ; ascii code
CONSTANT ascii_Y          , 59    ; ascii code
CONSTANT ascii_Z          , 5A    ; ascii code
CONSTANT ascii_LBKT       , 5B    ; ascii code
CONSTANT ascii_BKSLASH    , 5C    ; ascii code
CONSTANT ascii_RBKT       , 5D    ; ascii code
CONSTANT ascii_CARET      , 5E    ; ascii code
CONSTANT ascii_UNDER      , 5F    ; ascii code

CONSTANT ascii_TICK       , 60    ; ascii code
CONSTANT ascii_a          , 61    ; ascii code
CONSTANT ascii_b          , 62    ; ascii code
CONSTANT ascii_c          , 63    ; ascii code
CONSTANT ascii_d          , 64    ; ascii code
CONSTANT ascii_e          , 65    ; ascii code
CONSTANT ascii_f          , 66    ; ascii code
CONSTANT ascii_g          , 67    ; ascii code
CONSTANT ascii_h          , 68    ; ascii code
CONSTANT ascii_i          , 69    ; ascii code
CONSTANT ascii_j          , 6A    ; ascii code
CONSTANT ascii_k          , 6B    ; ascii code
CONSTANT ascii_l          , 6C    ; ascii code
CONSTANT ascii_m          , 6D    ; ascii code
CONSTANT ascii_n          , 6E    ; ascii code
CONSTANT ascii_o          , 6F    ; ascii code

CONSTANT ascii_p          , 70    ; ascii code
CONSTANT ascii_q          , 71    ; ascii code
CONSTANT ascii_r          , 72    ; ascii code
CONSTANT ascii_s          , 73    ; ascii code
CONSTANT ascii_t          , 74    ; ascii code
CONSTANT ascii_u          , 75    ; ascii code
CONSTANT ascii_v          , 76    ; ascii code
CONSTANT ascii_w          , 77    ; ascii code
CONSTANT ascii_x          , 78    ; ascii code
CONSTANT ascii_y          , 79    ; ascii code
CONSTANT ascii_z          , 7A    ; ascii code
CONSTANT ascii_LBRACE     , 7B    ; ascii code
CONSTANT ascii_VBAR       , 7C    ; ascii code
CONSTANT ascii_RBRACE     , 7D    ; ascii code
CONSTANT ascii_TILDE      , 7E    ; ascii code
CONSTANT ascii_DEL        , 7F    ; ascii code

;================================================================
; NOTE: size limit is 4096 lines of actual assembly code
;       Old documentation says it is 1024. This is now incorrect.
;================================================================

;Make sure to clear the menu after each submenu is finished doing its thing.

		NAMEREG s9, i
		NAMEREG sA, j
		NAMEREG sB, waste
		NAMEREG sC, select_file
		NAMEREG s5, playing
		NAMEREG s6, msg_existing
		NAMEREG s8, record
		LOAD i, 00
		LOAD j, 02
		JUMP welcome_message

;Function to waste time
waste_time:
		ADD waste, 01
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait
		call wait

		COMPARE waste, FF
		RETURN Z
		JUMP waste_time

;Pause the recording
pause:
		LOAD s0, s0
		COMPARE playing, 00
		JUMP Z, play_recording_wait

		LOAD playing, 00
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time	

		LOAD s0, ascii_FF 
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_P ;P
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_y ;y
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_g ;g
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_COLON ;:
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		COMPARE i, 00
		CALL Z, out_one
		COMPARE i, 01
		CALL Z, out_two
		COMPARE i, 02
		CALL Z, out_three
		COMPARE i, 03
		CALL Z, out_four
		COMPARE i, 04
		CALL Z, out_five
		call wait

		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_P ;P
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_A ;A
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_U ;U
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_S ;S
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_E ;E
		OUTPUT s0, uart_data_tx
		call wait

		JUMP play_recording_wait
		
;Play the recording
play_recording:
		LOAD s0, s0
		OUTPUT i, file_select
		JUMP play_recording_wait

;Stop the recording
stop_playing:
		LOAD s0, s0
		LOAD playing, 00
		JUMP play_message_menu

;Wait for user input to play selected recording
play_recording_wait:
		LOAD s0, s0
		INPUT s0, play_pause
		INPUT s1, back
		COMPARE s0, 01
		JUMP Z, play_recording
		COMPARE playing, 01
		JUMP NZ, play_recording_msg
		COMPARE s0, 00
		JUMP Z, pause
		COMPARE s1, 01
		JUMP Z, stop_playing
		JUMP play_recording_wait

;Output playing message
play_recording_msg:
		LOAD s0, s0
		COMPARE playing, 01
		JUMP Z, play_recording_wait

		LOAD playing, 01
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time	

		LOAD s0, ascii_FF 
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_P ;P
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_y ;y
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_g ;g
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_COLON ;:
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		COMPARE i, 00
		CALL Z, out_one
		COMPARE i, 01
		CALL Z, out_two
		COMPARE i, 02
		CALL Z, out_three
		COMPARE i, 03
		CALL Z, out_four
		COMPARE i, 04
		CALL Z, out_five
		call wait

		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_P ;P
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_L ;L
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_A ;A
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_Y ;Y
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_I ;I
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_N ;N
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_G ;G
		OUTPUT s0, uart_data_tx
		call wait

		JUMP play_recording_wait

;Outputs a line if the message does not exist
output_msg_not_exist_play:
		LOAD s0, s0

		COMPARE msg_existing, 01
		JUMP Z, play_message
		
		LOAD msg_existing, 01

		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_E ;E
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_S ;S
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_S ;S
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_A ;A
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_G ;G
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_E ;E
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_D ;D
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_O ;O
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_E ;E
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_S ;S
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_N ;N
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SINQUOT ;'
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_T ;N
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_E ;E
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_X ;X
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_I ;I
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_S ;S
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_T ;T
		OUTPUT s0, uart_data_tx
		call wait

		JUMP play_message
;Outputs a line if the message does not exist
output_msg_not_exist_delete:
		LOAD s0, s0

		COMPARE msg_existing, 01
		JUMP Z, delete_message
		
		LOAD msg_existing, 01

		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_E ;E
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_S ;S
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_S ;S
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_A ;A
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_G ;G
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_E ;E
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_D ;D
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_O ;O
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_E ;E
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_S ;S
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_N ;N
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SINQUOT ;'
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_T ;N
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_E ;E
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_X ;X
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_I ;I
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_S ;S
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_T ;T
		OUTPUT s0, uart_data_tx
		call wait

		JUMP delete_message

;Check if the message exists
check_msg_exists:
		LOAD s0, s0
		INPUT s0, msg_exists ;Sends '0' if message doesn't exist, '1' if it does exist
		COMPARE s0, 00
		JUMP Z, output_msg_not_exist_play
		COMPARE s0, 01
		JUMP Z, play_recording_wait

;Change state in fsm
play_state:
		LOAD s0, s0
		LOAD s0, 01
		OUTPUT s0, write_to_fsm
		JUMP check_msg_exists

;Subroutines for handling scrolling in the play message menu
play_btn_down:
		LOAD s0, s0
		ADD i, 01
		LOAD msg_existing, 00
		COMPARE i, ascii_1
		JUMP NZ, play_message_menu
		
play_btn_down_roll:
		LOAD s0, s0
		LOAD i, 00
		COMPARE i, ascii_1
		JUMP NZ, play_message_menu

play_btn_up:
		LOAD s0, s0
		SUB i, 01
		LOAD msg_existing, 00
		COMPARE i, ascii_1
		JUMP NZ, play_message_menu

play_btn_up_roll:
		LOAD s0, s0
		LOAD i, 04
		COMPARE i, ascii_1
		JUMP NZ, play_message_menu
		
;Wait for input from user for playing a message
play_message:
		LOAD s0, s0
		INPUT s0, scroll_up
		INPUT s1, scroll_down
		INPUT s2, select
		INPUT s3, back
		COMPARE s1, 00
		CALL NZ, play_btn_up
		COMPARE i, FF
		JUMP Z, play_btn_up_roll
		LOAD s0, s0
		COMPARE s0, 00
		CALL NZ, play_btn_down
		LOAD s0, s0
		COMPARE i, 05
		JUMP Z, play_btn_down_roll
		LOAD s0, s0
		COMPARE s2, 01
		JUMP Z, play_state
		LOAD s0, s0
		COMPARE s3, 01
		JUMP Z, back_to_main_menu
		JUMP play_message

;Output a message if memory is full
mem_full_message_record:
		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_E ;E
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_O ;O
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_R ;R
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_Y ;Y
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_F ;F
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_U ;U
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_L ;L
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_L ;L
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait

		JUMP record_message

;Output a something indicating message location is taken up
message_location_full:
		LOAD s0, s0
		
		LOAD msg_existing, 01

		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_E ;P
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_S ;P
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_S ;P
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_A ;P
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_G ;P
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_E ;P
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_SPACE ;P
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_A ;P
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_L ;P
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_R ;P
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_E ;P
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_A ;P
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_D ;P
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_Y ;P
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_SPACE ;P
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_E ;P
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_X ;P
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_I ;P
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_S ;P
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_T ;P
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_S ;P
		OUTPUT s0, uart_data_tx
		call wait

		JUMP record_message

;Start the recording
start_recording:
		LOAD s0, s0
		LOAD s0, 01
		OUTPUT s0, recording
		JUMP record_message

;Stop the recording
stop_recording:
		LOAD s0, s0
		LOAD s0, 00
		OUTPUT s0, recording
		JUMP record_message

;Subroutine to start/stop recording
set_recording:
		LOAD s0, s0
		OUTPUT i, file_select
		INPUT s4, mem_full
		INPUT s3, msg_exists
		COMPARE s4, 01
		JUMP Z, mem_full_message_record
		COMPARE s3, 01
		JUMP Z, message_location_full
		COMPARE record, 01
		JUMP Z, stop_recording
		COMPARE record, 00
		JUMP Z, start_recording

record_btn_down:
		LOAD s0, s0
		ADD i, 01
		LOAD msg_existing, 00
		COMPARE i, ascii_1
		JUMP NZ, record_message_menu
		
record_btn_down_roll:
		LOAD s0, s0
		LOAD i, 00
		COMPARE i, ascii_1
		JUMP NZ, record_message_menu

record_btn_up:
		LOAD s0, s0
		SUB i, 01
		LOAD msg_existing, 00
		COMPARE i, ascii_1
		JUMP NZ, record_message_menu

record_btn_up_roll:
		LOAD s0, s0
		LOAD i, 04
		COMPARE i, ascii_1
		JUMP NZ, record_message_menu

;Wait for input from user for recording messages
record_message:
		LOAD s0, s0
		INPUT s0, scroll_up
		INPUT s1, scroll_down
		INPUT s2, select
		INPUT s3, back
		INPUT s4, mem_full
		COMPARE s1, 00
		CALL NZ, record_btn_up
		COMPARE i, FF
		JUMP Z, record_btn_up_roll
		COMPARE s0, 00
		CALL NZ, record_btn_down
		COMPARE i, 04
		JUMP Z, record_btn_down_roll
		LOAD s0, s0
		COMPARE s3, 01
		JUMP Z, back_to_main_menu
		COMPARE s2, 01
		JUMP Z, set_recording
		JUMP record_message

;Subroutine letting picoblaze know deletion has finished
del_finish:
		LOAD s0, s0
		INPUT s0, delete_finish
		COMPARE s0, 01
		JUMP Z, main_menu
		JUMP del_finish

;Let the fsm know we are deleting a file
delete:
		LOAD s0, s0
		LOAD s0, 03
		OUTPUT s0, write_to_fsm
		OUTPUT i, file_select
		JUMP del_finish

;Check if the message exists
check_msg_exists_delete:
		LOAD s0, s0
		INPUT s0, msg_exists ;Sends '0' if message doesn't exist, '1' if it does exist
		COMPARE s0, 00
		JUMP Z, output_msg_not_exist_delete
		COMPARE s0, 01
		JUMP Z, delete

;Subroutines for handling scrolling in delete menu
del_btn_down:
		LOAD s0, s0
		ADD i, 01
		LOAD msg_existing, 00
		COMPARE i, ascii_1
		JUMP NZ, delete_message_menu
		
del_btn_down_roll:
		LOAD s0, s0
		LOAD i, 00
		COMPARE i, ascii_1
		JUMP NZ, delete_message_menu

del_btn_up:
		LOAD s0, s0
		SUB i, 01
		LOAD msg_existing, 00
		COMPARE i, ascii_1
		JUMP NZ, delete_message_menu

del_btn_up_roll:
		LOAD s0, s0
		LOAD i, 04
		COMPARE i, ascii_1
		JUMP NZ, delete_message_menu

;Wait for input from user for deleting messages
delete_message:
		LOAD s0, s0
		INPUT s0, scroll_up
		INPUT s1, scroll_down
		INPUT s2, select
		INPUT s3, back
		COMPARE s1, 00
		CALL NZ, del_btn_up
		COMPARE i, FF
		JUMP Z, del_btn_up_roll
		COMPARE s0, 00
		CALL NZ, del_btn_down
		COMPARE i, 04
		JUMP Z, del_btn_down_roll
		LOAD s0, s0
		COMPARE s2, 01
		JUMP Z, check_msg_exists_delete
		COMPARE s3, 01
		JUMP Z, back_to_main_menu
		JUMP delete_message

;Finally deleting all messages
delete_all:
		LOAD s0, 04
		OUTPUT s0, write_to_fsm
		JUMP main_menu
		
;Confirmation for deleting all messages
delete_all_messages:
		LOAD s0, s0
		INPUT s0, scroll_up
		INPUT s1, scroll_down
		INPUT s2, back
		COMPARE s1, 01
		JUMP Z, back_to_main_menu
		COMPARE s0, 01
		CALL Z, delete_all
		LOAD s0, s0
		COMPARE s2, 01
		JUMP Z, back_to_main_menu
		JUMP delete_all_messages

vol_down:
		LOAD s0, s0
		LOAD sF, 02
		SUB j, 01
		OUTPUT sF, vol_sel
		COMPARE i, ascii_1
		JUMP NZ, volume_control_menu

vol_up:
		LOAD s0, s0
		LOAD sF, 01
		ADD j, 01
		OUTPUT sF, vol_sel
		COMPARE i, ascii_1
		JUMP NZ, volume_control_menu

vol_down_stay:
		LOAD s0, s0
		LOAD j, 00
		COMPARE i, ascii_1
		JUMP NZ, volume_control_menu

vol_up_stay:
		LOAD s0, s0
		LOAD j, 14
		COMPARE i, ascii_1
		JUMP NZ, volume_control_menu

;Subroutine for volume control
volume_control:
		
		LOAD s0, s0
		INPUT s0, scroll_up
		INPUT s1, scroll_down
		INPUT s2, back
		COMPARE s1, 00
		CALL NZ, vol_up
		COMPARE j, FF
		JUMP Z, vol_up_stay
		COMPARE s0, 00
		CALL NZ, vol_down
		COMPARE j, 15
		JUMP Z, vol_down_stay
		LOAD s0, s0
		COMPARE s2, 01
		JUMP Z, back_to_main_menu
		LOAD s7, 00
		OUTPUT s7, vol_sel
		JUMP volume_control
		
;Play message menu
play_message_menu:

		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time	

		LOAD s0, ascii_FF 
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_P ;P
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_y ;y
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_g ;g
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_COLON ;:
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		COMPARE i, 00
		CALL Z, out_one
		COMPARE i, 01
		CALL Z, out_two
		COMPARE i, 02
		CALL Z, out_three
		COMPARE i, 03
		CALL Z, out_four
		COMPARE i, 04
		CALL Z, out_five
		call wait

		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait

		JUMP play_message

;Record message menu
record_message_menu:

		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time

		LOAD s0, 02
		OUTPUT s0, write_to_fsm

		LOAD s0, ascii_FF 
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_R ;R
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_c ;c
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_o ;o
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_r ;r
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_d ;d
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_g ;g
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_QUESTION ;?
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_S ;S
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_E ;E
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_L ;L
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_E ;E
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_C ;C
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_T ;T
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_B ;B
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_T ;T
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_N ;N
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_T ;T
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_o ;o
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_R ;R
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_c ;c
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_o ;o
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_r ;r
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_d ;d
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_F ;F
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_i ;i
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_COLON ;:
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		COMPARE i, 00
		CALL Z, out_one
		COMPARE i, 01
		CALL Z, out_two
		COMPARE i, 02
		CALL Z, out_three
		COMPARE i, 03
		CALL Z, out_four
		COMPARE i, 04
		CALL Z, out_five
		call wait

		;Call to actual submenu here
		JUMP record_message

;Delete all message confirmation
delete_all_messages_confirm:

		LOAD s0, ascii_FF 
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_D ;D
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_t ;t
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_A ;A
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_QUESTION ;?
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait

		;Call to actual submenu here
		JUMP delete_all_messages

;Delete message menu
delete_message_menu:

		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time	

		LOAD s0, ascii_FF 
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_D ;D
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_t ;t
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_g ;g
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_QUESTION ;?
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_F ;F
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_i ;i
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_COLON ;:
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		COMPARE i, 00
		CALL Z, out_one
		COMPARE i, 01
		CALL Z, out_two
		COMPARE i, 02
		CALL Z, out_three
		COMPARE i, 03
		CALL Z, out_four
		COMPARE i, 04
		CALL Z, out_five
		call wait

		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait

		;Call to actual submenu here
		JUMP delete_message

;Volume control menu
volume_control_menu:
		
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time	

		LOAD s0, ascii_FF 
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_V ;V
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_o ;o
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_u ;u
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_m ;m
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_COLON ;:
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		COMPARE j, 00
		CALL Z, out_one
		COMPARE j, 01
		CALL Z, out_two
		COMPARE j, 02
		CALL Z, out_three
		COMPARE j, 03
		CALL Z, out_four
		COMPARE j, 04
		CALL Z, out_five
		COMPARE j, 05
		CALL Z, out_six
		COMPARE j, 06
		CALL Z, out_seven
		COMPARE j, 07
		CALL Z, out_eight
		COMPARE j, 08
		CALL Z, out_nine
		COMPARE j, 09
		CALL Z, out_ten
		COMPARE j, 0A
		CALL Z, out_eleven
		COMPARE j, 0B
		CALL Z, out_twelve
		COMPARE j, 0C
		CALL Z, out_thirteen
		COMPARE j, 0D
		CALL Z, out_fourteen
		COMPARE j, 0E
		CALL Z, out_fifteen
		call wait

		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait
		
		;Call to actual submenu here
		LOAD waste, 00
		JUMP volume_control

;Subroutine for sending fsm back to main state
back_to_main_menu:
		LOAD s0, 00
		OUTPUT s0, write_to_fsm
		JUMP main_menu

;Once the user presses the select button, picoblaze should transition here.
selection_comparison:
		LOAD s0, s0
		LOAD s0, ascii_FF 
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, i
		LOAD i, 00
		COMPARE s0, 00
		JUMP Z, play_message_menu
		COMPARE s0, 01
		JUMP Z, record_message_menu
		COMPARE s0, 02
		JUMP Z, delete_message_menu
		COMPARE s0, 03
		JUMP Z, delete_all_messages_confirm
		COMPARE s0, 04
		JUMP Z, volume_control_menu


;Subroutines for handling scrolling in the main menu
btn_down:
		LOAD s0, s0
		ADD i, 01
		COMPARE i, ascii_1
		JUMP NZ, main_menu
		
btn_down_roll:
		LOAD s0, s0
		LOAD i, 00
		COMPARE i, ascii_1
		JUMP NZ, main_menu

btn_up:
		LOAD s0, s0
		SUB i, 01
		COMPARE i, ascii_1
		JUMP NZ, main_menu

btn_up_roll:
		LOAD s0, s0
		LOAD i, 04
		COMPARE i, ascii_1
		JUMP NZ, main_menu

;Wait for input from the user.
await_input:
		LOAD s0, s0
		INPUT s0, scroll_up
		INPUT s1, scroll_down
		INPUT s2, select
		COMPARE s1, 00
		CALL NZ, btn_up
		LOAD s0, s0
		COMPARE i, 05
		JUMP Z, btn_up_roll
		LOAD s0, s0
		COMPARE s0, 00
		CALL NZ, btn_down
		LOAD s0, s0
		COMPARE i, FF
		JUMP Z, btn_down_roll
		LOAD s0, s0
		COMPARE s2, 01
		JUMP Z, selection_comparison
		JUMP await_input	

;Wait for uart buffer to empty
wait:		
		LOAD s0, s0
		INPUT s3, buffer_full
		COMPARE s3, 01
		JUMP Z, wait
		RETURN

;Subroutines for outputting specific numbers
out_one:
		LOAD s0, ascii_1
		OUTPUT s0, uart_data_tx
		RETURN

out_two:
		LOAD s0, ascii_2
		OUTPUT s0, uart_data_tx
		RETURN

out_three:
		LOAD s0, ascii_3
		OUTPUT s0, uart_data_tx
		RETURN

out_four:
		LOAD s0, ascii_4
		OUTPUT s0, uart_data_tx
		RETURN

out_five:
		LOAD s0, ascii_5
		OUTPUT s0, uart_data_tx
		RETURN

out_six:
		LOAD s0, ascii_6
		OUTPUT s0, uart_data_tx
		RETURN

out_seven:
		LOAD s0, ascii_7
		OUTPUT s0, uart_data_tx
		RETURN

out_eight:
		LOAD s0, ascii_8
		OUTPUT s0, uart_data_tx
		RETURN

out_nine:
		LOAD s0, ascii_9
		OUTPUT s0, uart_data_tx
		RETURN
out_ten:
		LOAD s0, ascii_1
		OUTPUT s0, uart_data_tx
		CALL wait

		LOAD s0, ascii_0
		OUTPUT s0, uart_data_tx
		RETURN

out_eleven:
		LOAD s0, ascii_1
		OUTPUT s0, uart_data_tx
		CALL wait

		LOAD s0, ascii_1
		OUTPUT s0, uart_data_tx
		RETURN

out_twelve:
		LOAD s0, ascii_1
		OUTPUT s0, uart_data_tx
		CALL wait

		LOAD s0, ascii_2
		OUTPUT s0, uart_data_tx
		RETURN

out_thirteen:
		LOAD s0, ascii_1
		OUTPUT s0, uart_data_tx
		CALL wait

		LOAD s0, ascii_3
		OUTPUT s0, uart_data_tx
		RETURN

out_fourteen:
		LOAD s0, ascii_1
		OUTPUT s0, uart_data_tx
		CALL wait

		LOAD s0, ascii_4
		OUTPUT s0, uart_data_tx
		RETURN

out_fifteen:
		LOAD s0, ascii_1
		OUTPUT s0, uart_data_tx
		CALL wait

		LOAD s0, ascii_5
		OUTPUT s0, uart_data_tx
		RETURN

;Wait for input from the user
welcome_wait:
		LOAD s0, s0
		INPUT s0, select
		COMPARE s0, 01
		JUMP Z, main_menu
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		INPUT s0, select
		COMPARE s0, 01
		JUMP Z, main_menu
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		INPUT s0, select
		COMPARE s0, 01
		JUMP Z, main_menu
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		INPUT s0, select
		COMPARE s0, 01
		JUMP Z, main_menu
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		INPUT s0, select
		COMPARE s0, 01
		JUMP Z, main_menu
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		INPUT s0, select
		COMPARE s0, 01
		JUMP Z, main_menu
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		INPUT s0, select
		COMPARE s0, 01
		JUMP Z, main_menu
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		INPUT s0, select
		COMPARE s0, 01
		JUMP Z, main_menu
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		INPUT s0, select
		COMPARE s0, 01
		JUMP Z, main_menu
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		INPUT s0, select
		COMPARE s0, 01
		JUMP Z, main_menu
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		CALL waste_time
		JUMP main_menu

;Welcome message
welcome_message:
		LOAD s0, ascii_FF 
		OUTPUT s0, uart_data_tx
		call wait
		
		LOAD s0, mem_full
		COMPARE s0, 01
		CALL Z, mem_full_message

		LOAD s0, ascii_W ;W
		OUTPUT s0, uart_data_tx
		call wait
		
		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_c ;c
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_o ;o
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_m ;m
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_t ;t
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_o ;o
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_d ;d
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_i ;i
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_p ;p
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_y ;y
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_r ;r
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_V ;V
		OUTPUT s0, uart_data_tx
		call wait	

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_r ;r
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_i ;i
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_o ;o
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_n ;n
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_4 ;4
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_PERIOD ;.
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_2 ;2
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_0 ;0
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_PERIOD ;.
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_6 ;6
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_9 ;9
		OUTPUT s0, uart_data_tx
		call wait

		JUMP welcome_wait

;Outputs a memory full message
mem_full_message:
		
		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_E ;E
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_O ;O
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_R ;R
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_Y ;Y
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_F ;F
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_U ;U
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_L ;L
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_L ;L
		OUTPUT s0, uart_data_tx
		call wait

		RETURN

;Outputs the main menu
main_menu:     LOAD s0, s0  ; (nop)

                ; Code for main menu options

		LOAD s0, ascii_FF 
		OUTPUT s0, uart_data_tx
		call wait
		
		LOAD s0, mem_full
		COMPARE s0, 01
		CALL Z, mem_full_message

		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_d ;d
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_i ;i
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_p ;p
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_y ;y
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_r ;r
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_V ;V
		OUTPUT s0, uart_data_tx
		call wait	

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_r ;r
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_i ;i
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_o ;o
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_n ;n
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_4 ;4
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_PERIOD ;.
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_2 ;2
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_0 ;0
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_PERIOD ;.
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_6 ;6
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_9 ;9
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait	

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_n ;n
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_u ;u
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_O ;O
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_p ;p
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_t ;t
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_i ;i
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_o ;o
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_n ;n
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_COLON ;:
		OUTPUT s0, uart_data_tx
		call wait
		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_1 ;1
		OUTPUT s0, uart_data_tx
		call wait	

		LOAD s0, ascii_PERIOD ;.
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_RPAREN ;)
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_P ;P
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_y ;y
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_g ;g
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait	

		LOAD s0, ascii_2 ;2
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_PERIOD ;.
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_RPAREN ;)
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_R ;R
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_c ;c
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_o ;o
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_r ;r
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_d ;d
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_g ;g
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_3 ;3
		OUTPUT s0, uart_data_tx
		call wait	

		LOAD s0, ascii_PERIOD ;.
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_RPAREN ;)
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_D ;D
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_t ;t
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_g ;g
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_4 ;4
		OUTPUT s0, uart_data_tx
		call wait	

		LOAD s0, ascii_PERIOD ;.
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_RPAREN ;)
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_D ;D
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_t ;t
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_M ;M
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_a ;a
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_g ;g
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_s ;s
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_5 ;5
		OUTPUT s0, uart_data_tx
		call wait	

		LOAD s0, ascii_PERIOD ;.
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_RPAREN ;)
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_V ;V
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_o ;o
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_u ;u
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_m ;m
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_C ;C
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_o ;o
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_n ;n
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_t ;t
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_r ;r
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_o ;o
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_C ;C
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_u ;u
		OUTPUT s0, uart_data_tx
		call wait 

		LOAD s0, ascii_r ;r
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_r ;r
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_n ;n
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_t ;t
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_S ;S
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_l ;l
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_e ;e
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_c ;c
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_t ;t
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_i ;i
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_o ;o
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_n ;n
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_COLON ;:
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_SPACE ;
		OUTPUT s0, uart_data_tx
		call wait

		COMPARE i, 00
		CALL Z, out_one
		COMPARE i, 01
		CALL Z, out_two
		COMPARE i, 02
		CALL Z, out_three
		COMPARE i, 03
		CALL Z, out_four
		COMPARE i, 04
		CALL Z, out_five
		call wait

		LOAD s0, ascii_LF ;
		OUTPUT s0, uart_data_tx
		call wait

		LOAD s0, ascii_CR ;
		OUTPUT s0, uart_data_tx
		call wait
		jump await_input

;================================================================
;
;================================================================
